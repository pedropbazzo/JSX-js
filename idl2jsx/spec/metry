<!DOCTYPE html><html lang=en><head>
  <meta content="text/html; charset=utf-8" http-equiv=Content-Type>
  <title>Geometry Interfaces Module Level 1</title>
  <link href=../default.css rel=stylesheet type=text/css>
  <link href=../csslogo.ico rel="shortcut icon" type=image/x-icon>
  <link href=https://www.w3.org/StyleSheets/TR/W3C-ED rel=stylesheet type=text/css>
<script async src=https://w3c-test.org/resources.whatwg.org/file-bug.js></script>

</head>
<body class=h-entry>
<div class=head>
  <p data-fill-with=logo><a class=logo href=http://www.w3.org/>
    <img alt=W3C height=48 src=http://www.w3.org/Icons/w3c_home width=72>
</a></p>
  <h1 class="p-name no-ref" id=title>Geometry Interfaces Module Level 1</h1>
  <h2 class="no-num no-toc no-ref heading settled heading" id=subtitle><span class=content>Editor’s Draft,
    <span class=dt-updated><span class=value-title title=20131112>12 November 2013</span></span></span></h2>
  <div data-fill-with=spec-metadata><dl><dt>This version:<dd><a class=u-url href=http://dev.w3.org/fxtf/geometry/>http://dev.w3.org/fxtf/geometry/</a><dt>Editor’s Draft:<dd><a href=http://dev.w3.org/fxtf/geometry/>http://dev.w3.org/fxtf/geometry/</a>
    <dt>Feedback:</dt>
        <dd><a href="mailto:public-fx@w3.org?subject=%5Bgeometry%5D%20feedback">public-fx@w3.org</a>
            with subject line
            “<kbd>[geometry] <var>… message topic …</var></kbd>”(<a href=http://lists.w3.org/Archives/Public/public-fx/ rel=discussion>archives</a>)<dt>Test Suite:<dd>None Yet<dt>Editors:
<dd class="p-author h-card vcard"><a class="p-name fn u-email email" href=mailto:simonp@opera.com>Simon Pieters</a> (<span class="p-org org">Opera Software ASA</span>)<dd class="p-author h-card vcard"><a class="p-name fn u-email email" href=mailto:dschulze@adobe.com>Dirk Schulze</a> (<span class="p-org org">Adobe Systems Inc.</span>)<dd class="p-author h-card vcard"><a class="p-name fn u-email email" href=mailto:rcabanier@adobe.com>Rik Cabanier</a> (<span class="p-org org">Adobe Systems Inc.</span>)<dt>Issues List:<dd><a href="https://www.w3.org/Bugs/Public/buglist.cgi?product=FXTF&amp;component=Geometry&amp;resolution=---">Bugzilla</a> (<a href="https://www.w3.org/Bugs/Public/enter_bug.cgi?product=FXTF&amp;component=Geometry">file a bug</a>)</dl></div>
  <div data-fill-with=warning></div>
  <p class=copyright data-fill-with=copyright><a href=http://www.w3.org/Consortium/Legal/ipr-notice#Copyright>Copyright</a> © 2013 <a href=http://www.w3.org/><abbr title="World Wide Web Consortium">W3C</abbr></a><sup>®</sup> (<a href=http://www.csail.mit.edu/><abbr title="Massachusetts Institute of Technology">MIT</abbr></a>, <a href=http://www.ercim.eu/><abbr title="European Research Consortium for Informatics and Mathematics">ERCIM</abbr></a>, <a href=http://www.keio.ac.jp/>Keio</a>, <a href=http://ev.buaa.edu.cn/>Beihang</a>), All Rights Reserved. W3C <a href=http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer>liability</a>, <a href=http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks>trademark</a> and <a href=http://www.w3.org/Consortium/Legal/copyright-documents>document use</a> rules apply.</p>
  <hr title="Separator for header">
</div>

<h2 class="no-num no-toc no-ref heading settled heading" id=abstract><span class=content>Abstract</span></h2>
<p class=p-summary data-fill-with=abstract>This specification provides basic geometric interfaces.
<a href=http://www.w3.org/TR/CSS/>CSS</a> is a language for describing the rendering of structured documents 
(such as HTML and XML) 
on screen, on paper, in speech, etc.</p>

<h2 class="no-num no-toc no-ref heading settled heading" id=status><span class=content>Status of this document</span></h2>
<div data-fill-with=status><p>
	This is a public copy of the editors' draft. 
	It is provided for discussion only and may change at any moment. 
	Its publication here does not imply endorsement of its contents by W3C. 
	Don’t cite this document other than as work in progress.

<p>
	The (<a href=http://lists.w3.org/Archives/Public/public-fx/>archived</a>) public mailing list
	<a href="mailto:public-fx@w3.org?Subject=%5Bgeometry%5D%20PUT%20SUBJECT%20HERE">public-fx@w3.org</a> 
	(see <a href=http://www.w3.org/Mail/Request>instructions</a>) 
	is preferred for discussion of this specification. 
	When sending e-mail, 
	please put the text “geometry” in the subject, 
	preferably like this:
	“[geometry] <em>…summary of comment…</em>”

<p>
	This document was produced by the <a href=http://www.w3.org/Style/CSS/members>CSS Working Group</a> 
	(part of the <a href=http://www.w3.org/Style/>Style Activity</a>) and the <a href=http://www.w3.org/Graphics/SVG/WG/>SVG Working Group</a> (part of the
	<a href=http://www.w3.org/Graphics/>Graphics Activity</a>).

<p>
	This document was produced by groups operating under 
	the <a href=http://www.w3.org/Consortium/Patent-Policy-20040205/>5 February 2004 W3C Patent Policy</a>. 
	W3C maintains a <a href=http://www.w3.org/2004/01/pp-impl/32061/status rel=disclosure>public list of any patent disclosures (CSS)</a>
	and a <a href=http://www.w3.org/2004/01/pp-impl/19480/status rel=disclosure>public list of any patent disclosures (SVG)</a> 
	made in connection with the deliverables of each group; 
	these pages also includes instructions for disclosing a patent. 
	An individual who has actual knowledge of a patent which the individual believes contains
	<a href=http://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential>Essential Claim(s)</a> 
	must disclose the information in accordance with <a href=http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure>section 6 of the W3C Patent Policy</a>.</div>
<div data-fill-with=at-risk></div>

<h2 class="no-num no-toc no-ref heading settled heading" id=contents><span class=content>Table of contents</span></h2>
<div data-fill-with=table-of-contents><ul class=toc><li><a href=#intro><span class=secno>1</span>Introduction</a><li><a href=#terminology><span class=secno>2</span>Terminology</a><li><a href=#DOMPoint><span class=secno>3</span>
The DOMPoint interfaces</a><li><a href=#DOMRect><span class=secno>4</span>
The DOMRect interfaces</a><li><a href=#DOMRectList><span class=secno>5</span>
The DOMRectList Interface</a><li><a href=#DOMQuad><span class=secno>6</span>
The DOMQuad interface</a><li><a href=#DOMMatrix><span class=secno>7</span>
The DOMMatrix interfaces</a><li><a href=#conformance><span class=secno></span>
Conformance</a><ul class=toc><li><a href=#conventions><span class=secno></span>
Document conventions</a><li><a href=#conformance-classes><span class=secno></span>
Conformance classes</a><li><a href=#partial><span class=secno></span>
Partial implementations</a><li><a href=#experimental><span class=secno></span>
Experimental implementations</a><li><a href=#testing><span class=secno></span>
Non-experimental implementations</a></ul><li><a href=#references><span class=secno></span>
References</a><ul class=toc><li><a href=#normative><span class=secno></span>
Normative References</a><li><a href=#informative><span class=secno></span>
Informative References</a></ul><li><a href=#index><span class=secno></span>
Index</a><li><a href=#property-index><span class=secno></span>
Property index</a><li><a href=#issues-index><span class=secno></span>Issues Index</a></ul></div>



<h2 class="heading settled heading" data-level=1 id=intro><span class=secno>1 </span><span class=content>Introduction</span><a class=self-link href=#intro></a></h2>

<p>This specification describes several geometry interfaces for the representation of points, quads, rectangles and transformation matrices with the dimension of 3x2 and 4x4.

<p>The SVG interfaces SVGPoint, SVGRect and SVGMatrix <a data-biblio-type=informative data-link-type=biblio href=#svg11 title=svg11>[SVG11]</a> are aliasing the here defined interfaces in favor for common interfaces used by SVG, Canvas 2D Context  and CSS Transforms [[CSS3-TRANSFORMS]].

<h2 class="heading settled heading" data-level=2 id=terminology><span class=secno>2 </span><span class=content>Terminology</span><a class=self-link href=#terminology></a></h2>

<dl>
  <dt><dfn data-dfn-type=dfn data-noexport="" id=post-multiply>post-multiply<a class=self-link href=#post-multiply></a></dfn></dt>
  <dd>
    Term A post-multiplied by term B is equal to A · B.
  </dd>
  <dt><dfn data-dfn-type=dfn data-noexport="" id=pre-multiply>pre-multiply<a class=self-link href=#pre-multiply></a></dfn></dt>
  <dd>
    Term A pre-multiplied by term B is equal to B · A.
  </dd>
  <dt><dfn data-dfn-type=dfn data-noexport="" id=multiply>multiply<a class=self-link href=#multiply></a></dfn></dt>
  <dd>
    Multiply term A by term B is equal to A · B.
  </dd>
</dl>

<h2 class="heading settled heading" data-level=3 id=DOMPoint><span class=secno>3 </span><span class=content>
The DOMPoint interfaces</span><a class=self-link href=#DOMPoint></a></h2>

<p>A 2D point or a 3D point can be represented by the following WebIDL interfaces:

<pre class=idl>interface <dfn class=idl-code data-dfn-type=interface data-export="" data-global-name="" id=dom-dompointreadonly title=DOMPointReadOnly>DOMPointReadOnly<a class=self-link href=#dom-dompointreadonly></a></dfn> {
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMPointReadOnly<interface>/x<attribute>" data-link-for=DOMPointReadOnly data-link-type=attribute href=#dom-dompointreadonly-dompoint-x title=x>x</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMPointReadOnly<interface>/y<attribute>" data-link-for=DOMPointReadOnly data-link-type=attribute href=#dom-dompointreadonly-dompoint-y title=y>y</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMPointReadOnly<interface>/z<attribute>" data-link-for=DOMPointReadOnly data-link-type=attribute href=#dom-dompointreadonly-dompoint-z title=z>z</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMPointReadOnly<interface>/w<attribute>" data-link-for=DOMPointReadOnly data-link-type=attribute href=#dom-dompointreadonly-dompoint-w title=w>w</a>;
};

[Constructor,
 Constructor(<a data-link-type=idl href=#dictdef-dompointinit title=dompointinit>DOMPointInit</a> <dfn class=idl-code data-dfn-for=DOMPoint/DOMPoint() data-dfn-type=argument data-export="" data-global-name="DOMPoint<interface>/DOMPoint()<method>/point<argument>" id=dom-dompointdompoint-point title=point>point<a class=self-link href=#dom-dompointdompoint-point></a></dfn>),
 Constructor(unrestricted double <dfn class=idl-code data-dfn-for=DOMPoint/DOMPoint() data-dfn-type=argument data-export="" data-global-name="DOMPoint<interface>/DOMPoint()<method>/x<argument>" id=dom-dompointdompoint-x title=x>x<a class=self-link href=#dom-dompointdompoint-x></a></dfn>, unrestricted double <dfn class=idl-code data-dfn-for=DOMPoint/DOMPoint() data-dfn-type=argument data-export="" data-global-name="DOMPoint<interface>/DOMPoint()<method>/y<argument>" id=dom-dompointdompoint-y title=y>y<a class=self-link href=#dom-dompointdompoint-y></a></dfn>,
             optional unrestricted double <dfn class=idl-code data-dfn-for=DOMPoint/DOMPoint() data-dfn-type=argument data-export="" data-global-name="DOMPoint<interface>/DOMPoint()<method>/z<argument>" id=dom-dompointdompoint-z title=z>z<a class=self-link href=#dom-dompointdompoint-z></a></dfn> = 0, optional unrestricted double <dfn class=idl-code data-dfn-for=DOMPoint/DOMPoint() data-dfn-type=argument data-export="" data-global-name="DOMPoint<interface>/DOMPoint()<method>/w<argument>" id=dom-dompointdompoint-w title=w>w<a class=self-link href=#dom-dompointdompoint-w></a></dfn> = 1)]
interface <dfn class=idl-code data-dfn-type=interface data-export="" data-global-name="" id=dom-dompoint title=DOMPoint>DOMPoint<a class=self-link href=#dom-dompoint></a></dfn> : <a data-link-type=idl href=#dom-dompointreadonly title=dompointreadonly>DOMPointReadOnly</a> {
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMPoint<interface>/x<attribute>" data-link-for=DOMPoint data-link-type=attribute href=#dom-dompointreadonly-dompoint-x title=x>x</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMPoint<interface>/y<attribute>" data-link-for=DOMPoint data-link-type=attribute href=#dom-dompointreadonly-dompoint-y title=y>y</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMPoint<interface>/z<attribute>" data-link-for=DOMPoint data-link-type=attribute href=#dom-dompointreadonly-dompoint-z title=z>z</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMPoint<interface>/w<attribute>" data-link-for=DOMPoint data-link-type=attribute href=#dom-dompointreadonly-dompoint-w title=w>w</a>;
};

dictionary <dfn class=idl-code data-dfn-type=dictionary data-export="" data-global-name="" id=dictdef-dompointinit title=DOMPointInit>DOMPointInit<a class=self-link href=#dictdef-dompointinit></a></dfn> {
    unrestricted double <dfn class=idl-code data-dfn-for=DOMPointInit data-dfn-type=dict-member data-export="" data-global-name="DOMPointInit<dictionary>/x<dict-member>" id=dom-dompointinit-x title=x>x<a class=self-link href=#dom-dompointinit-x></a></dfn> = 0;
    unrestricted double <dfn class=idl-code data-dfn-for=DOMPointInit data-dfn-type=dict-member data-export="" data-global-name="DOMPointInit<dictionary>/y<dict-member>" id=dom-dompointinit-y title=y>y<a class=self-link href=#dom-dompointinit-y></a></dfn> = 0;
    unrestricted double <dfn class=idl-code data-dfn-for=DOMPointInit data-dfn-type=dict-member data-export="" data-global-name="DOMPointInit<dictionary>/z<dict-member>" id=dom-dompointinit-z title=z>z<a class=self-link href=#dom-dompointinit-z></a></dfn> = 0;
    unrestricted double <dfn class=idl-code data-dfn-for=DOMPointInit data-dfn-type=dict-member data-export="" data-global-name="DOMPointInit<dictionary>/w<dict-member>" id=dom-dompointinit-w title=w>w<a class=self-link href=#dom-dompointinit-w></a></dfn> = 1;
};
</pre>
<p>The <dfn class=idl-code data-dfn-for=DOMPoint data-dfn-type=constructor data-export="" id=dom-dompoint-dompoint title=dompoint()><code>DOMPoint()</code><a class=self-link href=#dom-dompoint-dompoint></a></dfn> constructor, when invoked, must run the following steps:

<ol>
 <li><p>If invoked with one argument, follow these substeps:
  <ol>
   <li><p>Let <var>point</var> be the argument.
   <li><p>Let <var>x</var> be the <code>x</code> dictionary member of <var>point</var>.
   <li><p>Let <var>y</var> be the <code>y</code> dictionary member of <var>point</var>.
   <li><p>Let <var>z</var> be the <code>z</code> dictionary member of <var>point</var>.
   <li><p>Let <var>w</var> be the <code>w</code> dictionary member of <var>point</var>.
  </ol>
 <li><p>Otherwise, let <var>x</var>, <var>y</var>, <var>z</var> and <var>w</var> be the given arguments, respectively.
 <li><p>Return a new <code>DOMPoint</code> object with the <code title=dom-DOMPoint-x>x</code>, <code title=dom-DOMPoint-y>y</code>,
 <code title=dom-DOMPoint-z>z</code> and <code title=dom-DOMPoint-w>w</code> attributes set to <var>x</var>, <var>y</var>, <var>z</var> and <var>w</var>,
 respectively.
</ol>


<div data-dfn-for="DOMPointReadOnly DOMPoint" data-dfn-type=attribute>
 The <dfn class=idl-code data-dfn-for="DOMPointReadOnly DOMPoint" data-dfn-type=attribute data-export="" id=dom-dompointreadonly-dompoint-x>x<a class=self-link href=#dom-dompointreadonly-dompoint-x></a></dfn> attribute gives the x coordinate of the point. On getting, it must return the current value. On setting, it must set the current value to the new value.

<p> The <dfn class=idl-code data-dfn-for="DOMPointReadOnly DOMPoint" data-dfn-type=attribute data-export="" id=dom-dompointreadonly-dompoint-y>y<a class=self-link href=#dom-dompointreadonly-dompoint-y></a></dfn> attribute gives the y coordinate of the point. On getting, it must return the current value. On setting, it must set the current value to the new value.

<p> The <dfn class=idl-code data-dfn-for="DOMPointReadOnly DOMPoint" data-dfn-type=attribute data-export="" id=dom-dompointreadonly-dompoint-z>z<a class=self-link href=#dom-dompointreadonly-dompoint-z></a></dfn> attribute gives the z coordinate of the point. On getting, it must return the current value. On setting, it must set the current value to the new value.

<p> The <dfn class=idl-code data-dfn-for="DOMPointReadOnly DOMPoint" data-dfn-type=attribute data-export="" id=dom-dompointreadonly-dompoint-w>w<a class=self-link href=#dom-dompointreadonly-dompoint-w></a></dfn> attribute gives the perspective of the point. On getting, it must return the current value. On setting, it must set the current value to the new value.
</div>

<p class=issue id=issue-ffc97e37><a class=self-link href=#issue-ffc97e37></a>SVGPoint has a method: SVGPoint matrixTransform(in SVGMatrix matrix);<br>Should it be adapted and added here as well?</p>

<h2 class="heading settled heading" data-level=4 id=DOMRect><span class=secno>4 </span><span class=content>
The DOMRect interfaces</span><a class=self-link href=#DOMRect></a></h2>

<p>Objects implementing the <a class=idl-code data-link-type=interface href=#dom-domrectreadonly title=domrectreadonly>DOMRectReadOnly</a> interface represent a <dfn data-dfn-type=dfn data-noexport="" id=rectangle>rectangle<a class=self-link href=#rectangle></a></dfn>. The type of box is specified by the method or attribute that returns a <a class=idl-code data-link-type=interface href=#dom-domrect title=domrect>DOMRect</a> or <a class=idl-code data-link-type=interface href=#dom-domrectreadonly title=domrectreadonly>DOMRectReadOnly</a> object.

<p>Rectangles have the following properties:

<dl data-dfn-for=rectangle>
  <dt><dfn data-dfn-type=dfn data-noexport="" id=origin>origin<a class=self-link href=#origin></a></dfn></dt>
  <dd>
    When the rectangle has a non-negative <a data-link-type=dfn href=#width title=width>width</a>, the rectangle`s horizontal origin is the left edge; otherwise, it is the right edge. Similarly, when the rectangle has a non-negative <a data-link-type=dfn href=#height title=height>height</a>, the rectangle`s vertical origin is the top edge; otherwise, it is the bottom edge.
  </dd>
  <dt><dfn data-dfn-type=dfn data-noexport="" id=x-coordinate>x coordinate<a class=self-link href=#x-coordinate></a></dfn></dt>
  <dd>
    The horizontal distance between the viewport`s left edge and the rectangle`s <a data-link-type=dfn href=#origin title=origin>origin</a>.
  </dd>
  <dt><dfn data-dfn-type=dfn data-noexport="" id=y-coordinate>y coordinate<a class=self-link href=#y-coordinate></a></dfn></dt>
  <dd>
    The vertical distance between the viewport`s top edge and the rectangle`s <a data-link-type=dfn href=#origin title=origin>origin</a>.
  </dd>
  <dt><dfn data-dfn-type=dfn data-noexport="" id=width>width<a class=self-link href=#width></a></dfn></dt>
  <dd>
    The width of the rectangle. Can be negative.
  </dd>
  <dt><dfn data-dfn-type=dfn data-noexport="" id=height>height<a class=self-link href=#height></a></dfn></dt>
  <dd>
    The height of the rectangle. Can be negative.
  </dd>
</dl>

<pre class=idl>[Constructor,
 Constructor(unrestricted double <dfn class=idl-code data-dfn-for=DOMRect/DOMRect() data-dfn-type=argument data-export="" data-global-name="DOMRect<interface>/DOMRect()<method>/x<argument>" id=dom-domrectdomrect-x title=x>x<a class=self-link href=#dom-domrectdomrect-x></a></dfn>, unrestricted double <dfn class=idl-code data-dfn-for=DOMRect/DOMRect() data-dfn-type=argument data-export="" data-global-name="DOMRect<interface>/DOMRect()<method>/y<argument>" id=dom-domrectdomrect-y title=y>y<a class=self-link href=#dom-domrectdomrect-y></a></dfn>,
             unrestricted double <dfn class=idl-code data-dfn-for=DOMRect/DOMRect() data-dfn-type=argument data-export="" data-global-name="DOMRect<interface>/DOMRect()<method>/width<argument>" id=dom-domrectdomrect-width title=width>width<a class=self-link href=#dom-domrectdomrect-width></a></dfn>, unrestricted double <dfn class=idl-code data-dfn-for=DOMRect/DOMRect() data-dfn-type=argument data-export="" data-global-name="DOMRect<interface>/DOMRect()<method>/height<argument>" id=dom-domrectdomrect-height title=height>height<a class=self-link href=#dom-domrectdomrect-height></a></dfn>)]
interface <dfn class=idl-code data-dfn-type=interface data-export="" data-global-name="" id=dom-domrect title=DOMRect>DOMRect<a class=self-link href=#dom-domrect></a></dfn> : <a data-link-type=idl href=#dom-domrectreadonly title=domrectreadonly>DOMRectReadOnly</a> {
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMRect<interface>/x<attribute>" data-link-for=DOMRect data-link-type=attribute href=#dom-domrectreadonly-domrect-x title=x>x</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMRect<interface>/y<attribute>" data-link-for=DOMRect data-link-type=attribute href=#dom-domrectreadonly-domrect-y title=y>y</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMRect<interface>/width<attribute>" data-link-for=DOMRect data-link-type=attribute href=#dom-domrectreadonly-domrect-width title=width>width</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMRect<interface>/height<attribute>" data-link-for=DOMRect data-link-type=attribute href=#dom-domrectreadonly-domrect-height title=height>height</a>;
};

interface <dfn class=idl-code data-dfn-type=interface data-export="" data-global-name="" id=dom-domrectreadonly title=DOMRectReadOnly>DOMRectReadOnly<a class=self-link href=#dom-domrectreadonly></a></dfn> {
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMRectReadOnly<interface>/x<attribute>" data-link-for=DOMRectReadOnly data-link-type=attribute href=#dom-domrectreadonly-domrect-x title=x>x</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMRectReadOnly<interface>/y<attribute>" data-link-for=DOMRectReadOnly data-link-type=attribute href=#dom-domrectreadonly-domrect-y title=y>y</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMRectReadOnly<interface>/width<attribute>" data-link-for=DOMRectReadOnly data-link-type=attribute href=#dom-domrectreadonly-domrect-width title=width>width</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMRectReadOnly<interface>/height<attribute>" data-link-for=DOMRectReadOnly data-link-type=attribute href=#dom-domrectreadonly-domrect-height title=height>height</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMRectReadOnly<interface>/top<attribute>" data-link-for=DOMRectReadOnly data-link-type=attribute href=#dom-domrectreadonly-domrect-top title=top>top</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMRectReadOnly<interface>/right<attribute>" data-link-for=DOMRectReadOnly data-link-type=attribute href=#dom-domrectreadonly-domrect-right title=right>right</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMRectReadOnly<interface>/bottom<attribute>" data-link-for=DOMRectReadOnly data-link-type=attribute href=#dom-domrectreadonly-domrect-bottom title=bottom>bottom</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMRectReadOnly<interface>/left<attribute>" data-link-for=DOMRectReadOnly data-link-type=attribute href=#dom-domrectreadonly-domrect-left title=left>left</a>;
};
</pre>
<p>The <dfn class=idl-code data-dfn-for=DOMRect data-dfn-type=constructor data-export="" id=dom-domrect-domrect title=domrect()><code>DOMRect(<var>x</var>, <var>y</var>, <var>width</var>, <var>height</var>)</code><a class=self-link href=#dom-domrect-domrect></a></dfn> constructor, when
invoked, must run the following steps:

<ol>
 <li><p>If invoked with no arguments, let <var>x</var>, <var>y</var>, <var>width</var> and <var>height</var> be zero.
 <li><p>Return a new <code>DOMRect</code> object with <a data-link-type=dfn href=#x-coordinate title="x coordinate">x coordinate</a> set to <var>x</var>,
 <a data-link-type=dfn href=#y-coordinate title="y coordinate">y coordinate</a> set to <var>y</var>, <a data-link-type=dfn href=#width title=width>width</a> set to
 <var>width</var> and <a data-link-type=dfn href=#height title=height>height</a> set to <var>height</var>.
</ol>


<div data-dfn-for="DOMRectReadOnly DOMRect" data-dfn-type=attribute>
 The <dfn class=idl-code data-dfn-for="DOMRectReadOnly DOMRect" data-dfn-type=attribute data-export="" id=dom-domrectreadonly-domrect-x>x<a class=self-link href=#dom-domrectreadonly-domrect-x></a></dfn> attribute, on getting, must return the <a data-link-type=dfn href=#x-coordinate title="x coordinate">x coordinate</a>. The <a class=idl-code data-link-for=DOMRect data-link-type=attribute href=#dom-domrectreadonly-domrect-x title=x>x</a> attribute, on setting, must set the <a data-link-type=dfn href=#x-coordinate title="x coordinate">x coordinate</a> to the new value.

<p> The <dfn class=idl-code data-dfn-for="DOMRectReadOnly DOMRect" data-dfn-type=attribute data-export="" id=dom-domrectreadonly-domrect-y>y<a class=self-link href=#dom-domrectreadonly-domrect-y></a></dfn> attribute, on getting, it must return the <a data-link-type=dfn href=#y-coordinate title="y coordinate">y coordinate</a>. The <a class=idl-code data-link-for=DOMRect data-link-type=attribute href=#dom-domrectreadonly-domrect-y title=y>y</a> attribute, on setting, must set the <a data-link-type=dfn href=#y-coordinate title="y coordinate">y coordinate</a> to the new value.

<p> The <dfn class=idl-code data-dfn-for="DOMRectReadOnly DOMRect" data-dfn-type=attribute data-export="" id=dom-domrectreadonly-domrect-width>width<a class=self-link href=#dom-domrectreadonly-domrect-width></a></dfn> attribute, on getting, must return the <a data-link-type=dfn href=#width title=width>width</a>. The <a class=idl-code data-link-for=DOMRect data-link-type=attribute href=#dom-domrectreadonly-domrect-width title=width>width</a> attribute, on setting, must set the <a data-link-type=dfn href=#width title=width>width</a> to the new value.

<p> The <dfn class=idl-code data-dfn-for="DOMRectReadOnly DOMRect" data-dfn-type=attribute data-export="" id=dom-domrectreadonly-domrect-height>height<a class=self-link href=#dom-domrectreadonly-domrect-height></a></dfn> attribute, on getting, must return the <a data-link-type=dfn href=#height title=height>height</a>. The <a class=idl-code data-link-for=DOMRect data-link-type=attribute href=#dom-domrectreadonly-domrect-height title=height>height</a> attribute, on setting, must set the <a data-link-type=dfn href=#height title=height>height</a> to the new value.

<p> The <dfn class=idl-code data-dfn-for="DOMRectReadOnly DOMRect" data-dfn-type=attribute data-export="" id=dom-domrectreadonly-domrect-top>top<a class=self-link href=#dom-domrectreadonly-domrect-top></a></dfn> attribute, on getting, must return min(<a data-link-type=dfn href=#y-coordinate title="y coordinate">y coordinate</a>, <a data-link-type=dfn href=#y-coordinate title="y coordinate">y coordinate</a> + <a data-link-type=dfn href=#height title=height>height</a>).

<p> The <dfn class=idl-code data-dfn-for="DOMRectReadOnly DOMRect" data-dfn-type=attribute data-export="" id=dom-domrectreadonly-domrect-right>right<a class=self-link href=#dom-domrectreadonly-domrect-right></a></dfn> attribute, on getting, must return max(<a data-link-type=dfn href=#x-coordinate title="x coordinate">x coordinate</a>, <a data-link-type=dfn href=#x-coordinate title="x coordinate">x coordinate</a> + <a data-link-type=dfn href=#width title=width>width</a>).

<p> The <dfn class=idl-code data-dfn-for="DOMRectReadOnly DOMRect" data-dfn-type=attribute data-export="" id=dom-domrectreadonly-domrect-bottom>bottom<a class=self-link href=#dom-domrectreadonly-domrect-bottom></a></dfn> attribute, on getting, must return max(<a data-link-type=dfn href=#y-coordinate title="y coordinate">y coordinate</a>, <a data-link-type=dfn href=#y-coordinate title="y coordinate">y coordinate</a> + <a data-link-type=dfn href=#height title=height>height</a>).

<p> The <dfn class=idl-code data-dfn-for="DOMRectReadOnly DOMRect" data-dfn-type=attribute data-export="" id=dom-domrectreadonly-domrect-left>left<a class=self-link href=#dom-domrectreadonly-domrect-left></a></dfn> attribute, on getting, must return min(<a data-link-type=dfn href=#x-coordinate title="x coordinate">x coordinate</a>, <a data-link-type=dfn href=#x-coordinate title="x coordinate">x coordinate</a> + <a data-link-type=dfn href=#width title=width>width</a>).
</div>

<h2 class="heading settled heading" data-level=5 id=DOMRectList><span class=secno>5 </span><span class=content>
The DOMRectList Interface</span><a class=self-link href=#DOMRectList></a></h2>

<pre class=idl>[ArrayClass]
interface <dfn class=idl-code data-dfn-type=interface data-export="" data-global-name="" id=dom-domrectlist title=DOMRectList>DOMRectList<a class=self-link href=#dom-domrectlist></a></dfn> {
    readonly attribute unsigned long <a class=idl-code data-global-name="DOMRectList<interface>/length<attribute>" data-link-for=DOMRectList data-link-type=attribute href=#dom-domrectlist-length title=length>length</a>;
    getter <a data-link-type=idl href=#dom-domrect title=domrect>DOMRect</a> <a class=idl-code data-global-name="DOMRectList<interface>/item()<method>" data-link-for=DOMRectList data-link-type=method href=#dom-domrectlist-item title=item()>item</a>(unsigned long <dfn class=idl-code data-dfn-for=DOMRectList/item() data-dfn-type=argument data-export="" data-global-name="DOMRectList<interface>/item()<method>/index<argument>" id=dom-domrectlistitem-index title=index>index<a class=self-link href=#dom-domrectlistitem-index></a></dfn>);
};
</pre>
<p>The <dfn class=idl-code data-dfn-for=DOMRectList data-dfn-type=attribute data-export="" id=dom-domrectlist-length>length<a class=self-link href=#dom-domrectlist-length></a></dfn> attribute must return the total number of <a class=idl-code data-link-type=interface href=#dom-domrect title=domrect>DOMRect</a> objects associated with the object.

<p>The <dfn class=idl-code data-dfn-for=DOMRectList data-dfn-type=method data-export="" id=dom-domrectlist-item title=item()>item(<var>index</var>)<a class=self-link href=#dom-domrectlist-item></a></dfn> method, when invoked, must throw an <a class=idl-code data-link-type=exception title=indexsizeerror>IndexSizeError</a> exception when <var>index</var> is greater than the number of <a class=idl-code data-link-type=interface href=#dom-domrect title=domrect>DOMRect</a> objects associated with the object. Otherwise, the <a class=idl-code data-link-type=interface href=#dom-domrect title=domrect>DOMRect</a> object at <var>index</var> must be returned.

<h2 class="heading settled heading" data-level=6 id=DOMQuad><span class=secno>6 </span><span class=content>
The DOMQuad interface</span><a class=self-link href=#DOMQuad></a></h2>

<p>Objects implementing the <a class=idl-code data-link-type=interface href=#dom-domquad title=domquad>DOMQuad</a> interface represents a <dfn data-dfn-type=dfn data-noexport="" id=quadrilateral>quadrilateral<a class=self-link href=#quadrilateral></a></dfn>. <a class=idl-code data-link-type=interface href=#dom-domquad title=domquad>DOMQuad</a> objects have an <dfn data-dfn-for=quadlirateral data-dfn-type=dfn data-noexport="" id=associated-bounding-rectangle>associated bounding rectangle<a class=self-link href=#associated-bounding-rectangle></a></dfn> set to a <a class=idl-code data-link-type=interface href=#dom-domrectreadonly title=domrectreadonly>DOMRectReadOnly</a> object when created.

<pre class=idl>[Constructor(<a data-link-type=idl href=#dictdef-dompointinit title=dompointinit>DOMPointInit</a> <dfn class=idl-code data-dfn-for=DOMQuad/DOMQuad() data-dfn-type=argument data-export="" data-global-name="DOMQuad<interface>/DOMQuad()<method>/p1<argument>" id=dom-domquaddomquad-p1 title=p1>p1<a class=self-link href=#dom-domquaddomquad-p1></a></dfn>, <a data-link-type=idl href=#dictdef-dompointinit title=dompointinit>DOMPointInit</a> <dfn class=idl-code data-dfn-for=DOMQuad/DOMQuad() data-dfn-type=argument data-export="" data-global-name="DOMQuad<interface>/DOMQuad()<method>/p2<argument>" id=dom-domquaddomquad-p2 title=p2>p2<a class=self-link href=#dom-domquaddomquad-p2></a></dfn>,
             <a data-link-type=idl href=#dictdef-dompointinit title=dompointinit>DOMPointInit</a> <dfn class=idl-code data-dfn-for=DOMQuad/DOMQuad() data-dfn-type=argument data-export="" data-global-name="DOMQuad<interface>/DOMQuad()<method>/p3<argument>" id=dom-domquaddomquad-p3 title=p3>p3<a class=self-link href=#dom-domquaddomquad-p3></a></dfn>, <a data-link-type=idl href=#dictdef-dompointinit title=dompointinit>DOMPointInit</a> <dfn class=idl-code data-dfn-for=DOMQuad/DOMQuad() data-dfn-type=argument data-export="" data-global-name="DOMQuad<interface>/DOMQuad()<method>/p4<argument>" id=dom-domquaddomquad-p4 title=p4>p4<a class=self-link href=#dom-domquaddomquad-p4></a></dfn>),
 Constructor(<a data-link-type=idl href=#dom-domrectreadonly title=domrectreadonly>DOMRectReadOnly</a> <dfn class=idl-code data-dfn-for=DOMQuad/DOMQuad() data-dfn-type=argument data-export="" data-global-name="DOMQuad<interface>/DOMQuad()<method>/rect<argument>" id=dom-domquaddomquad-rect title=rect>rect<a class=self-link href=#dom-domquaddomquad-rect></a></dfn>)]
interface <dfn class=idl-code data-dfn-type=interface data-export="" data-global-name="" id=dom-domquad title=DOMQuad>DOMQuad<a class=self-link href=#dom-domquad></a></dfn> {
    [SameObject] readonly attribute <a data-link-type=idl href=#dom-dompoint title=dompoint>DOMPoint</a> <a class=idl-code data-global-name="DOMQuad<interface>/p1<attribute>" data-link-for=DOMQuad data-link-type=attribute href=#dom-domquad-p1 title=p1>p1</a>;
    [SameObject] readonly attribute <a data-link-type=idl href=#dom-dompoint title=dompoint>DOMPoint</a> <a class=idl-code data-global-name="DOMQuad<interface>/p2<attribute>" data-link-for=DOMQuad data-link-type=attribute href=#dom-domquad-p2 title=p2>p2</a>;
    [SameObject] readonly attribute <a data-link-type=idl href=#dom-dompoint title=dompoint>DOMPoint</a> <a class=idl-code data-global-name="DOMQuad<interface>/p3<attribute>" data-link-for=DOMQuad data-link-type=attribute href=#dom-domquad-p3 title=p3>p3</a>;
    [SameObject] readonly attribute <a data-link-type=idl href=#dom-dompoint title=dompoint>DOMPoint</a> <a class=idl-code data-global-name="DOMQuad<interface>/p4<attribute>" data-link-for=DOMQuad data-link-type=attribute href=#dom-domquad-p4 title=p4>p4</a>;
    [SameObject] readonly attribute <a data-link-type=idl href=#dom-domrectreadonly title=domrectreadonly>DOMRectReadOnly</a> <a class=idl-code data-global-name="DOMQuad<interface>/bounds<attribute>" data-link-for=DOMQuad data-link-type=attribute href=#dom-domquad-bounds title=bounds>bounds</a>;
};
</pre>
<p>The <dfn class=idl-code data-dfn-for=DOMQuad data-dfn-type=constructor data-export="" id=dom-domquad-domquad title=domquad()><code>DOMQuad()</code><a class=self-link href=#dom-domquad-domquad></a></dfn> constructor, when invoked, must run the following steps:

<ol>
 <li><p>If invoked with one argument, follow these substeps:
  <ol>
   <li><p>Let <var>rect</var> be the argument.
   <li><p>Let <var>x</var>, <var>y</var>, <var>width</var> and <var>height</var> be <var>rect</var>`s the value of <code title=dom-DOMRect-x>x</code>,
   <code title=dom-DOMRect-y>y</code>, <code title=dom-DOMRect-width>width</code> and <code title=dom-DOMRect-height>height</code> attributes,
   respectively.
   <li><p>Let <var>point 1</var> be a new <code>DOMPoint</code> object with <code title=dom-DOMPoint-x>x</code> set to <var>x</var>,
   <code title=dom-DOMPoint-y>y</code> set to <var>y</var>, <code title=dom-DOMPoint-z>z</code> set to zero and <code title=dom-DOMPoint-w>w</code> set to
   one.
   <li><p>Let <var>point 2</var> be a new <code>DOMPoint</code> object with <code title=dom-DOMPoint-x>x</code> set to <var>x</var> + <var>width</var>,
   <code title=dom-DOMPoint-y>y</code> set to <var>y</var>, <code title=dom-DOMPoint-z>z</code> set to zero and <code title=dom-DOMPoint-w>w</code> set to
   one.
   <li><p>Let <var>point 3</var> be a new <code>DOMPoint</code> object with <code title=dom-DOMPoint-x>x</code> set to <var>x</var> + <var>width</var>,
   <code title=dom-DOMPoint-y>y</code> set to <var>y</var> + <var>height</var>, <code title=dom-DOMPoint-z>z</code> set to zero and
   <code title=dom-DOMPoint-w>w</code> set to one.
   <li><p>Let <var>point 4</var> be a new <code>DOMPoint</code> object with <code title=dom-DOMPoint-x>x</code> set to <var>x</var>,
   <code title=dom-DOMPoint-y>y</code> set to <var>y</var> + <var>height</var>, <code title=dom-DOMPoint-z>z</code> set to zero and
   <code title=dom-DOMPoint-w>w</code> set to one.
   <li><p>Let <var>bounds</var> be a new <code>DOMRectReadOnly</code> object with its attributes set to the values of the namesake attributes in
   <var>rect</var>.
  </ol>
 <li><p>Otherwise, follow these substeps:
  <ol>
   <li><p>Let <var>p1</var>, <var>p2</var>, <var>p3</var> and <var>p4</var> be the given arguments, in the same order.
   <li><p>Let <var>point 1</var> be a new <code>DOMPoint</code> object with its attributes set to the values of the namesake dictionary members in
   <var>p1</var>.
   <li><p>Let <var>point 2</var> be a new <code>DOMPoint</code> object with its attributes set to the values of the namesake dictionary members in
   <var>p2</var>.
   <li><p>Let <var>point 3</var> be a new <code>DOMPoint</code> object with its attributes set to the values of the namesake dictionary members in
   <var>p3</var>.
   <li><p>Let <var>point 4</var> be a new <code>DOMPoint</code> object with its attributes set to the values of the namesake dictionary members in
   <var>p4</var>.
   <li><p>Let <var>bounds</var> be a new <code>DOMRectReadOnly</code> object describing the smallest bounding box of <var>point 1</var>, <var>point 2</var>,
   <var>point 3</var> and <var>point 4</var>.
  </ol>
 <li><p>Return a new <code>DOMQuad</code> with <code title=dom-DOMQuad-p1>p1</code> set to <var>point 1</var>, <code title=dom-DOMQuad-p2>p2</code> set to
 <var>point 2</var>, <code title=dom-DOMQuad-p3>p3</code> set to <var>point 3</var> and <code title=dom-DOMQuad-p4>p4</code> set to <var>point 4</var>, and
 let the <a data-link-type=dfn href=#associated-bounding-rectangle title="associated bounding rectangle">associated bounding rectangle</a> be <var>bounds</var>.
</ol>

<div data-dfn-for=DOMQuad data-dfn-type=attribute>
 The <dfn class=idl-code data-dfn-for=DOMQuad data-dfn-type=attribute data-export="" id=dom-domquad-p1>p1<a class=self-link href=#dom-domquad-p1></a></dfn> attribute must return the <a class=idl-code data-link-type=interface href=#dom-dompoint title=dompoint>DOMPoint</a> it was set to.

<p> The <dfn class=idl-code data-dfn-for=DOMQuad data-dfn-type=attribute data-export="" id=dom-domquad-p2>p2<a class=self-link href=#dom-domquad-p2></a></dfn> attribute must return the <a class=idl-code data-link-type=interface href=#dom-dompoint title=dompoint>DOMPoint</a> it was set to.

<p> The <dfn class=idl-code data-dfn-for=DOMQuad data-dfn-type=attribute data-export="" id=dom-domquad-p3>p3<a class=self-link href=#dom-domquad-p3></a></dfn> attribute must return the <a class=idl-code data-link-type=interface href=#dom-dompoint title=dompoint>DOMPoint</a> it was set to.

<p> The <dfn class=idl-code data-dfn-for=DOMQuad data-dfn-type=attribute data-export="" id=dom-domquad-p4>p4<a class=self-link href=#dom-domquad-p4></a></dfn> attribute must return the <a class=idl-code data-link-type=interface href=#dom-dompoint title=dompoint>DOMPoint</a> it was set to.

<p> The <dfn class=idl-code data-dfn-for=DOMQuad data-dfn-type=attribute data-export="" id=dom-domquad-bounds>bounds<a class=self-link href=#dom-domquad-bounds></a></dfn> attribute must return the <a data-link-type=dfn href=#associated-bounding-rectangle title="associated bounding rectangle">associated bounding rectangle</a>.
</div>

<p>The <a data-link-type=dfn href=#associated-bounding-rectangle title="associated bounding rectangle">associated bounding rectangle</a> is live; whenever the objects in <a class=idl-code data-link-type=attribute href=#dom-domquad-p1 title=p1>p1</a>, <a class=idl-code data-link-type=attribute href=#dom-domquad-p2 title=p2>p2</a>, <a class=idl-code data-link-type=attribute href=#dom-domquad-p3 title=p3>p3</a> or <a class=idl-code data-link-type=attribute href=#dom-domquad-p4 title=p4>p4</a> are changed, the <a data-link-type=dfn href=#associated-bounding-rectangle title="associated bounding rectangle">associated bounding rectangle</a> must update its attributes as appropriate to describe the new smallest bounding box of the four points.

<h2 class="heading settled heading" data-level=7 id=DOMMatrix><span class=secno>7 </span><span class=content>
The DOMMatrix interfaces</span><a class=self-link href=#DOMMatrix></a></h2>

<p>The <a class=idl-code data-link-type=interface href=#dom-dommatrix title=dommatrix>DOMMatrix</a> and <a class=idl-code data-link-type=interface href=#dom-dommatrixreadonly title=dommatrixreadonly>DOMMatrixReadOnly</a> interfaces represent a mathematical matrix with the purpose of describing transformations in a graphical context. The following sections describe the details of the interface.

<p>The <a class=idl-code data-link-type=interface href=#dom-dommatrix title=dommatrix>DOMMatrix</a> and <a class=idl-code data-link-type=interface href=#dom-dommatrixreadonly title=dommatrixreadonly>DOMMatrixReadOnly</a>  interfaces replace the SVGMatrix interface from SVG <a data-biblio-type=informative data-link-type=biblio href=#svg11 title=svg11>[SVG11]</a>.

<p>For legacy reasons, if the user agent supports SVG, <a class=idl-code data-link-type=interface href=http://www.w3.org/html/wg/drafts/html/CR/browsers.html#window title=window>Window</a> objects must have a writable, configurable, non-enumerable property named <dfn data-dfn-type=dfn data-noexport="" id=svgmatrix>SVGMatrix<a class=self-link href=#svgmatrix></a></dfn> whose value is the <a class=idl-code data-link-type=interface href=#dom-dommatrix title=dommatrix>DOMMatrix</a> interface object. <a data-biblio-type=informative data-link-type=biblio href=#svg11 title=svg11>[SVG11]</a>

<div class=figure>
  <img alt="4x4 matrix with items m11 to m44" src=images/4x4matrix.png>
  <p class=capture>A 4x4 matrix representing a <a class=idl-code data-link-type=interface href=#dom-dommatrix title=dommatrix>DOMMatrix</a> with items m11 to m44.</p>
</div>

<pre class=idl>interface <dfn class=idl-code data-dfn-type=interface data-export="" data-global-name="" id=dom-dommatrixreadonly title=DOMMatrixReadOnly>DOMMatrixReadOnly<a class=self-link href=#dom-dommatrixreadonly></a></dfn> {
    // These attributes are simple aliases for certain elements of the 4x4 matrix
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/a<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-a title=a>a</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/b<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-b title=b>b</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/c<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-c title=c>c</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/d<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-d title=d>d</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/e<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-e title=e>e</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/f<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-f title=f>f</a>;

    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/m11<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m11 title=m11>m11</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/m12<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m12 title=m12>m12</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/m13<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m13 title=m13>m13</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/m14<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m14 title=m14>m14</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/m21<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m21 title=m21>m21</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/m22<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m22 title=m22>m22</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/m23<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m23 title=m23>m23</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/m24<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m24 title=m24>m24</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/m31<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m31 title=m31>m31</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/m32<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m32 title=m32>m32</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/m33<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m33 title=m33>m33</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/m34<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m34 title=m34>m34</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/m41<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m41 title=m41>m41</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/m42<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m42 title=m42>m42</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/m43<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m43 title=m43>m43</a>;
    readonly attribute unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/m44<attribute>" data-link-for=DOMMatrixReadOnly data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m44 title=m44>m44</a>;

    // Immutable transform methods
    <a data-link-type=idl href=#dom-dommatrix title=dommatrix>DOMMatrix</a> <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/translate()<method>" data-link-for=DOMMatrixReadOnly data-link-type=method href=#dom-dommatrixreadonly-translate title=translate()>translate</a>(unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/translate() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/translate()<method>/tx<argument>" id=dom-dommatrixreadonlytranslate-tx title=tx>tx<a class=self-link href=#dom-dommatrixreadonlytranslate-tx></a></dfn>,
                        unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/translate() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/translate()<method>/ty<argument>" id=dom-dommatrixreadonlytranslate-ty title=ty>ty<a class=self-link href=#dom-dommatrixreadonlytranslate-ty></a></dfn>,
                        optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/translate() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/translate()<method>/tz<argument>" id=dom-dommatrixreadonlytranslate-tz title=tz>tz<a class=self-link href=#dom-dommatrixreadonlytranslate-tz></a></dfn> = 0);
    <a data-link-type=idl href=#dom-dommatrix title=dommatrix>DOMMatrix</a> <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/scale()<method>" data-link-for=DOMMatrixReadOnly data-link-type=method href=#dom-dommatrixreadonly-scale title=scale()>scale</a>(unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/scale() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/scale()<method>/scale<argument>" id=dom-dommatrixreadonlyscale-scale title=scale>scale<a class=self-link href=#dom-dommatrixreadonlyscale-scale></a></dfn>,
                    optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/scale() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/scale()<method>/originx<argument>" id=dom-dommatrixreadonlyscale-originx title=originX>originX<a class=self-link href=#dom-dommatrixreadonlyscale-originx></a></dfn> = 0,
                    optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/scale() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/scale()<method>/originy<argument>" id=dom-dommatrixreadonlyscale-originy title=originY>originY<a class=self-link href=#dom-dommatrixreadonlyscale-originy></a></dfn> = 0);
    <a data-link-type=idl href=#dom-dommatrix title=dommatrix>DOMMatrix</a> <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/scale3d()<method>" data-link-for=DOMMatrixReadOnly data-link-type=method href=#dom-dommatrixreadonly-scale3d title=scale3d()>scale3d</a>(unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/scale3d() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/scale3d()<method>/scale<argument>" id=dom-dommatrixreadonlyscale3d-scale title=scale>scale<a class=self-link href=#dom-dommatrixreadonlyscale3d-scale></a></dfn>,
                      optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/scale3d() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/scale3d()<method>/originx<argument>" id=dom-dommatrixreadonlyscale3d-originx title=originX>originX<a class=self-link href=#dom-dommatrixreadonlyscale3d-originx></a></dfn> = 0,
                      optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/scale3d() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/scale3d()<method>/originy<argument>" id=dom-dommatrixreadonlyscale3d-originy title=originY>originY<a class=self-link href=#dom-dommatrixreadonlyscale3d-originy></a></dfn> = 0,
                      optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/scale3d() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/scale3d()<method>/originz<argument>" id=dom-dommatrixreadonlyscale3d-originz title=originZ>originZ<a class=self-link href=#dom-dommatrixreadonlyscale3d-originz></a></dfn> = 0);
    <a data-link-type=idl href=#dom-dommatrix title=dommatrix>DOMMatrix</a> <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/scalenonuniform()<method>" data-link-for=DOMMatrixReadOnly data-link-type=method href=#dom-dommatrixreadonly-scalenonuniform title=scalenonuniform()>scaleNonUniform</a>(unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/scaleNonUniform() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/scaleNonUniform()<method>/scalex<argument>" id=dom-dommatrixreadonlyscalenonuniform-scalex title=scaleX>scaleX<a class=self-link href=#dom-dommatrixreadonlyscalenonuniform-scalex></a></dfn>,
                              optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/scaleNonUniform() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/scaleNonUniform()<method>/scaley<argument>" id=dom-dommatrixreadonlyscalenonuniform-scaley title=scaleY>scaleY<a class=self-link href=#dom-dommatrixreadonlyscalenonuniform-scaley></a></dfn> = 1,
                              optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/scaleNonUniform() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/scaleNonUniform()<method>/scalez<argument>" id=dom-dommatrixreadonlyscalenonuniform-scalez title=scaleZ>scaleZ<a class=self-link href=#dom-dommatrixreadonlyscalenonuniform-scalez></a></dfn> = 1,
                              optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/scaleNonUniform() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/scaleNonUniform()<method>/originx<argument>" id=dom-dommatrixreadonlyscalenonuniform-originx title=originX>originX<a class=self-link href=#dom-dommatrixreadonlyscalenonuniform-originx></a></dfn> = 0,
                              optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/scaleNonUniform() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/scaleNonUniform()<method>/originy<argument>" id=dom-dommatrixreadonlyscalenonuniform-originy title=originY>originY<a class=self-link href=#dom-dommatrixreadonlyscalenonuniform-originy></a></dfn> = 0,
                              optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/scaleNonUniform() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/scaleNonUniform()<method>/originz<argument>" id=dom-dommatrixreadonlyscalenonuniform-originz title=originZ>originZ<a class=self-link href=#dom-dommatrixreadonlyscalenonuniform-originz></a></dfn> = 0);
    <a data-link-type=idl href=#dom-dommatrix title=dommatrix>DOMMatrix</a> <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/rotate()<method>" data-link-for=DOMMatrixReadOnly data-link-type=method href=#dom-dommatrixreadonly-rotate title=rotate()>rotate</a>(unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/rotate() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/rotate()<method>/angle<argument>" id=dom-dommatrixreadonlyrotate-angle title=angle>angle<a class=self-link href=#dom-dommatrixreadonlyrotate-angle></a></dfn>,
                     optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/rotate() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/rotate()<method>/originx<argument>" id=dom-dommatrixreadonlyrotate-originx title=originX>originX<a class=self-link href=#dom-dommatrixreadonlyrotate-originx></a></dfn> = 0,
                     optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/rotate() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/rotate()<method>/originy<argument>" id=dom-dommatrixreadonlyrotate-originy title=originY>originY<a class=self-link href=#dom-dommatrixreadonlyrotate-originy></a></dfn> = 0);
    <a data-link-type=idl href=#dom-dommatrix title=dommatrix>DOMMatrix</a> <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/rotatefromvector()<method>" data-link-for=DOMMatrixReadOnly data-link-type=method href=#dom-dommatrixreadonly-rotatefromvector title=rotatefromvector()>rotateFromVector</a>(unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/rotateFromVector() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/rotateFromVector()<method>/x<argument>" id=dom-dommatrixreadonlyrotatefromvector-x title=x>x<a class=self-link href=#dom-dommatrixreadonlyrotatefromvector-x></a></dfn>,
                               unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/rotateFromVector() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/rotateFromVector()<method>/y<argument>" id=dom-dommatrixreadonlyrotatefromvector-y title=y>y<a class=self-link href=#dom-dommatrixreadonlyrotatefromvector-y></a></dfn>);
    <a data-link-type=idl href=#dom-dommatrix title=dommatrix>DOMMatrix</a> <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/rotateaxisangle()<method>" data-link-for=DOMMatrixReadOnly data-link-type=method href=#dom-dommatrixreadonly-rotateaxisangle title=rotateaxisangle()>rotateAxisAngle</a>(unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/rotateAxisAngle() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/rotateAxisAngle()<method>/x<argument>" id=dom-dommatrixreadonlyrotateaxisangle-x title=x>x<a class=self-link href=#dom-dommatrixreadonlyrotateaxisangle-x></a></dfn>,
                              unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/rotateAxisAngle() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/rotateAxisAngle()<method>/y<argument>" id=dom-dommatrixreadonlyrotateaxisangle-y title=y>y<a class=self-link href=#dom-dommatrixreadonlyrotateaxisangle-y></a></dfn>,
                              unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/rotateAxisAngle() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/rotateAxisAngle()<method>/z<argument>" id=dom-dommatrixreadonlyrotateaxisangle-z title=z>z<a class=self-link href=#dom-dommatrixreadonlyrotateaxisangle-z></a></dfn>,
                              unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/rotateAxisAngle() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/rotateAxisAngle()<method>/angle<argument>" id=dom-dommatrixreadonlyrotateaxisangle-angle title=angle>angle<a class=self-link href=#dom-dommatrixreadonlyrotateaxisangle-angle></a></dfn>);
    <a data-link-type=idl href=#dom-dommatrix title=dommatrix>DOMMatrix</a> <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/skewx()<method>" data-link-for=DOMMatrixReadOnly data-link-type=method href=#dom-dommatrixreadonly-skewx title=skewx()>skewX</a>(unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/skewX() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/skewX()<method>/sx<argument>" id=dom-dommatrixreadonlyskewx-sx title=sx>sx<a class=self-link href=#dom-dommatrixreadonlyskewx-sx></a></dfn>);
    <a data-link-type=idl href=#dom-dommatrix title=dommatrix>DOMMatrix</a> <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/skewy()<method>" data-link-for=DOMMatrixReadOnly data-link-type=method href=#dom-dommatrixreadonly-skewy title=skewy()>skewY</a>(unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/skewY() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/skewY()<method>/sy<argument>" id=dom-dommatrixreadonlyskewy-sy title=sy>sy<a class=self-link href=#dom-dommatrixreadonlyskewy-sy></a></dfn>);
    <a data-link-type=idl href=#dom-dommatrix title=dommatrix>DOMMatrix</a> <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/multiply()<method>" data-link-for=DOMMatrixReadOnly data-link-type=method href=#dom-dommatrixreadonly-multiply title=multiply()>multiply</a>(<a data-link-type=idl href=#dom-dommatrix title=dommatrix>DOMMatrix</a> <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/multiply() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/multiply()<method>/other<argument>" id=dom-dommatrixreadonlymultiply-other title=other>other<a class=self-link href=#dom-dommatrixreadonlymultiply-other></a></dfn>);
    <a data-link-type=idl href=#dom-dommatrix title=dommatrix>DOMMatrix</a> <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/flipx()<method>" data-link-for=DOMMatrixReadOnly data-link-type=method href=#dom-dommatrixreadonly-flipx title=flipx()>flipX</a>();
    <a data-link-type=idl href=#dom-dommatrix title=dommatrix>DOMMatrix</a> <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/flipy()<method>" data-link-for=DOMMatrixReadOnly data-link-type=method href=#dom-dommatrixreadonly-flipy title=flipy()>flipY</a>();
    <a data-link-type=idl href=#dom-dommatrix title=dommatrix>DOMMatrix</a> <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/inverse()<method>" data-link-for=DOMMatrixReadOnly data-link-type=method href=#dom-dommatrixreadonly-inverse title=inverse()>inverse</a>();

    // Helper methods
    boolean             <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/is2d()<method>" data-link-for=DOMMatrixReadOnly data-link-type=method href=#dom-dommatrixreadonly-is2d title=is2d()>is2D</a>();
    unrestricted double <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/determinant()<method>" data-link-for=DOMMatrixReadOnly data-link-type=method href=#dom-dommatrixreadonly-determinant title=determinant()>determinant</a>();
    <a data-link-type=idl href=#dom-dompoint title=dompoint>DOMPoint</a>            <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/transformpoint()<method>" data-link-for=DOMMatrixReadOnly data-link-type=method href=#dom-dommatrixreadonly-transformpoint title=transformpoint()>transformPoint</a>(<a data-link-type=idl href=#dictdef-dompointinit title=dompointinit>DOMPointInit</a> <dfn class=idl-code data-dfn-for=DOMMatrixReadOnly/transformPoint() data-dfn-type=argument data-export="" data-global-name="DOMMatrixReadOnly<interface>/transformPoint()<method>/point<argument>" id=dom-dommatrixreadonlytransformpoint-point title=point>point<a class=self-link href=#dom-dommatrixreadonlytransformpoint-point></a></dfn>);
    <a data-link-type=idl title=float32array>Float32Array</a>        <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/tofloat32array()<method>" data-link-for=DOMMatrixReadOnly data-link-type=method href=#dom-dommatrixreadonly-tofloat32array title=tofloat32array()>toFloat32Array</a>();
    <a data-link-type=idl title=float64array>Float64Array</a>        <a class=idl-code data-global-name="DOMMatrixReadOnly<interface>/tofloat64array()<method>" data-link-for=DOMMatrixReadOnly data-link-type=method href=#dom-dommatrixreadonly-tofloat64array title=tofloat64array()>toFloat64Array</a>();
                        stringifier;
};

[Constructor,
 Constructor(DOMString <dfn class=idl-code data-dfn-for=DOMMatrix/DOMMatrix() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/DOMMatrix()<method>/transformlist<argument>" id=dom-dommatrixdommatrix-transformlist title=transformList>transformList<a class=self-link href=#dom-dommatrixdommatrix-transformlist></a></dfn>),
 Constructor(<a data-link-type=idl href=#dom-dommatrixreadonly title=dommatrixreadonly>DOMMatrixReadOnly</a> <dfn class=idl-code data-dfn-for=DOMMatrix/DOMMatrix() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/DOMMatrix()<method>/other<argument>" id=dom-dommatrixdommatrix-other title=other>other<a class=self-link href=#dom-dommatrixdommatrix-other></a></dfn>),
 Constructor(<a data-link-type=idl title=float32array>Float32Array</a> <dfn class=idl-code data-dfn-for=DOMMatrix/DOMMatrix() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/DOMMatrix()<method>/array32<argument>" id=dom-dommatrixdommatrix-array32 title=array32>array32<a class=self-link href=#dom-dommatrixdommatrix-array32></a></dfn>),
 Constructor(<a data-link-type=idl title=float64array>Float64Array</a> <dfn class=idl-code data-dfn-for=DOMMatrix/DOMMatrix() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/DOMMatrix()<method>/array64<argument>" id=dom-dommatrixdommatrix-array64 title=array64>array64<a class=self-link href=#dom-dommatrixdommatrix-array64></a></dfn>),
 Constructor(sequence&lt;unrestricted double&gt; <dfn class=idl-code data-dfn-for=DOMMatrix/DOMMatrix() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/DOMMatrix()<method>/numbersequence<argument>" id=dom-dommatrixdommatrix-numbersequence title=numberSequence>numberSequence<a class=self-link href=#dom-dommatrixdommatrix-numbersequence></a></dfn>)]
interface <dfn class=idl-code data-dfn-type=interface data-export="" data-global-name="" id=dom-dommatrix title=DOMMatrix>DOMMatrix<a class=self-link href=#dom-dommatrix></a></dfn> : <a data-link-type=idl href=#dom-dommatrixreadonly title=dommatrixreadonly>DOMMatrixReadOnly</a> {
    // These attributes are simple aliases for certain elements of the 4x4 matrix
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/a<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-a title=a>a</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/b<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-b title=b>b</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/c<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-c title=c>c</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/d<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-d title=d>d</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/e<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-e title=e>e</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/f<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-f title=f>f</a>;

    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/m11<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m11 title=m11>m11</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/m12<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m12 title=m12>m12</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/m13<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m13 title=m13>m13</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/m14<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m14 title=m14>m14</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/m21<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m21 title=m21>m21</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/m22<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m22 title=m22>m22</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/m23<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m23 title=m23>m23</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/m24<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m24 title=m24>m24</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/m31<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m31 title=m31>m31</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/m32<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m32 title=m32>m32</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/m33<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m33 title=m33>m33</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/m34<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m34 title=m34>m34</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/m41<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m41 title=m41>m41</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/m42<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m42 title=m42>m42</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/m43<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m43 title=m43>m43</a>;
    inherit attribute unrestricted double <a class=idl-code data-global-name="DOMMatrix<interface>/m44<attribute>" data-link-for=DOMMatrix data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m44 title=m44>m44</a>;

    // Mutable transform methods
    void <a class=idl-code data-global-name="DOMMatrix<interface>/multiplyby()<method>" data-link-for=DOMMatrix data-link-type=method href=#dom-dommatrix-multiplyby title=multiplyby()>multiplyBy</a>(<a data-link-type=idl href=#dom-dommatrix title=dommatrix>DOMMatrix</a> <dfn class=idl-code data-dfn-for=DOMMatrix/multiplyBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/multiplyBy()<method>/other<argument>" id=dom-dommatrixmultiplyby-other title=other>other<a class=self-link href=#dom-dommatrixmultiplyby-other></a></dfn>);
    void <a class=idl-code data-global-name="DOMMatrix<interface>/premultiplyby()<method>" data-link-for=DOMMatrix data-link-type=method href=#dom-dommatrix-premultiplyby title=premultiplyby()>preMultiplyBy</a>(<a data-link-type=idl href=#dom-dommatrix title=dommatrix>DOMMatrix</a> <dfn class=idl-code data-dfn-for=DOMMatrix/preMultiplyBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/preMultiplyBy()<method>/other<argument>" id=dom-dommatrixpremultiplyby-other title=other>other<a class=self-link href=#dom-dommatrixpremultiplyby-other></a></dfn>);
    void <a class=idl-code data-global-name="DOMMatrix<interface>/translateby()<method>" data-link-for=DOMMatrix data-link-type=method href=#dom-dommatrix-translateby title=translateby()>translateBy</a>(unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/translateBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/translateBy()<method>/tx<argument>" id=dom-dommatrixtranslateby-tx title=tx>tx<a class=self-link href=#dom-dommatrixtranslateby-tx></a></dfn>,
                     unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/translateBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/translateBy()<method>/ty<argument>" id=dom-dommatrixtranslateby-ty title=ty>ty<a class=self-link href=#dom-dommatrixtranslateby-ty></a></dfn>,
                     optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/translateBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/translateBy()<method>/tz<argument>" id=dom-dommatrixtranslateby-tz title=tz>tz<a class=self-link href=#dom-dommatrixtranslateby-tz></a></dfn> = 0);
    void <a class=idl-code data-global-name="DOMMatrix<interface>/scaleby()<method>" data-link-for=DOMMatrix data-link-type=method href=#dom-dommatrix-scaleby title=scaleby()>scaleBy</a>(unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/scaleBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/scaleBy()<method>/scale<argument>" id=dom-dommatrixscaleby-scale title=scale>scale<a class=self-link href=#dom-dommatrixscaleby-scale></a></dfn>,
                 optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/scaleBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/scaleBy()<method>/originx<argument>" id=dom-dommatrixscaleby-originx title=originX>originX<a class=self-link href=#dom-dommatrixscaleby-originx></a></dfn> = 0,
                 optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/scaleBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/scaleBy()<method>/originy<argument>" id=dom-dommatrixscaleby-originy title=originY>originY<a class=self-link href=#dom-dommatrixscaleby-originy></a></dfn> = 0);
    void <a class=idl-code data-global-name="DOMMatrix<interface>/scale3dby()<method>" data-link-for=DOMMatrix data-link-type=method href=#dom-dommatrix-scale3dby title=scale3dby()>scale3dBy</a>(unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/scale3dBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/scale3dBy()<method>/scale<argument>" id=dom-dommatrixscale3dby-scale title=scale>scale<a class=self-link href=#dom-dommatrixscale3dby-scale></a></dfn>,
                   optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/scale3dBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/scale3dBy()<method>/originx<argument>" id=dom-dommatrixscale3dby-originx title=originX>originX<a class=self-link href=#dom-dommatrixscale3dby-originx></a></dfn> = 0,
                   optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/scale3dBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/scale3dBy()<method>/originy<argument>" id=dom-dommatrixscale3dby-originy title=originY>originY<a class=self-link href=#dom-dommatrixscale3dby-originy></a></dfn> = 0,
                   optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/scale3dBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/scale3dBy()<method>/originz<argument>" id=dom-dommatrixscale3dby-originz title=originZ>originZ<a class=self-link href=#dom-dommatrixscale3dby-originz></a></dfn> = 0);
    void <a class=idl-code data-global-name="DOMMatrix<interface>/scalenonuniformby()<method>" data-link-for=DOMMatrix data-link-type=method href=#dom-dommatrix-scalenonuniformby title=scalenonuniformby()>scaleNonUniformBy</a>(unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/scaleNonUniformBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/scaleNonUniformBy()<method>/scalex<argument>" id=dom-dommatrixscalenonuniformby-scalex title=scaleX>scaleX<a class=self-link href=#dom-dommatrixscalenonuniformby-scalex></a></dfn>,
                           optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/scaleNonUniformBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/scaleNonUniformBy()<method>/scaley<argument>" id=dom-dommatrixscalenonuniformby-scaley title=scaleY>scaleY<a class=self-link href=#dom-dommatrixscalenonuniformby-scaley></a></dfn> = 1,
                           optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/scaleNonUniformBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/scaleNonUniformBy()<method>/scalez<argument>" id=dom-dommatrixscalenonuniformby-scalez title=scaleZ>scaleZ<a class=self-link href=#dom-dommatrixscalenonuniformby-scalez></a></dfn> = 1,
                           optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/scaleNonUniformBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/scaleNonUniformBy()<method>/originx<argument>" id=dom-dommatrixscalenonuniformby-originx title=originX>originX<a class=self-link href=#dom-dommatrixscalenonuniformby-originx></a></dfn> = 0,
                           optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/scaleNonUniformBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/scaleNonUniformBy()<method>/originy<argument>" id=dom-dommatrixscalenonuniformby-originy title=originY>originY<a class=self-link href=#dom-dommatrixscalenonuniformby-originy></a></dfn> = 0,
                           optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/scaleNonUniformBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/scaleNonUniformBy()<method>/originz<argument>" id=dom-dommatrixscalenonuniformby-originz title=originZ>originZ<a class=self-link href=#dom-dommatrixscalenonuniformby-originz></a></dfn> = 0);
    void <a class=idl-code data-global-name="DOMMatrix<interface>/rotateby()<method>" data-link-for=DOMMatrix data-link-type=method href=#dom-dommatrix-rotateby title=rotateby()>rotateBy</a>(unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/rotateBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/rotateBy()<method>/angle<argument>" id=dom-dommatrixrotateby-angle title=angle>angle<a class=self-link href=#dom-dommatrixrotateby-angle></a></dfn>,
                  optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/rotateBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/rotateBy()<method>/originx<argument>" id=dom-dommatrixrotateby-originx title=originX>originX<a class=self-link href=#dom-dommatrixrotateby-originx></a></dfn> = 0,
                  optional unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/rotateBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/rotateBy()<method>/originy<argument>" id=dom-dommatrixrotateby-originy title=originY>originY<a class=self-link href=#dom-dommatrixrotateby-originy></a></dfn> = 0);
    void <a class=idl-code data-global-name="DOMMatrix<interface>/rotatefromvectorby()<method>" data-link-for=DOMMatrix data-link-type=method href=#dom-dommatrix-rotatefromvectorby title=rotatefromvectorby()>rotateFromVectorBy</a>(unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/rotateFromVectorBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/rotateFromVectorBy()<method>/x<argument>" id=dom-dommatrixrotatefromvectorby-x title=x>x<a class=self-link href=#dom-dommatrixrotatefromvectorby-x></a></dfn>,
                            unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/rotateFromVectorBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/rotateFromVectorBy()<method>/y<argument>" id=dom-dommatrixrotatefromvectorby-y title=y>y<a class=self-link href=#dom-dommatrixrotatefromvectorby-y></a></dfn>);
    void <a class=idl-code data-global-name="DOMMatrix<interface>/rotateaxisangleby()<method>" data-link-for=DOMMatrix data-link-type=method href=#dom-dommatrix-rotateaxisangleby title=rotateaxisangleby()>rotateAxisAngleBy</a>(unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/rotateAxisAngleBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/rotateAxisAngleBy()<method>/x<argument>" id=dom-dommatrixrotateaxisangleby-x title=x>x<a class=self-link href=#dom-dommatrixrotateaxisangleby-x></a></dfn>,
                           unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/rotateAxisAngleBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/rotateAxisAngleBy()<method>/y<argument>" id=dom-dommatrixrotateaxisangleby-y title=y>y<a class=self-link href=#dom-dommatrixrotateaxisangleby-y></a></dfn>,
                           unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/rotateAxisAngleBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/rotateAxisAngleBy()<method>/z<argument>" id=dom-dommatrixrotateaxisangleby-z title=z>z<a class=self-link href=#dom-dommatrixrotateaxisangleby-z></a></dfn>,
                           unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/rotateAxisAngleBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/rotateAxisAngleBy()<method>/angle<argument>" id=dom-dommatrixrotateaxisangleby-angle title=angle>angle<a class=self-link href=#dom-dommatrixrotateaxisangleby-angle></a></dfn>);
    void <a class=idl-code data-global-name="DOMMatrix<interface>/skewxby()<method>" data-link-for=DOMMatrix data-link-type=method href=#dom-dommatrix-skewxby title=skewxby()>skewXBy</a>(unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/skewXBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/skewXBy()<method>/sx<argument>" id=dom-dommatrixskewxby-sx title=sx>sx<a class=self-link href=#dom-dommatrixskewxby-sx></a></dfn>);
    void <a class=idl-code data-global-name="DOMMatrix<interface>/skewyby()<method>" data-link-for=DOMMatrix data-link-type=method href=#dom-dommatrix-skewyby title=skewyby()>skewYBy</a>(unrestricted double <dfn class=idl-code data-dfn-for=DOMMatrix/skewYBy() data-dfn-type=argument data-export="" data-global-name="DOMMatrix<interface>/skewYBy()<method>/sy<argument>" id=dom-dommatrixskewyby-sy title=sy>sy<a class=self-link href=#dom-dommatrixskewyby-sy></a></dfn>);
    void <a class=idl-code data-global-name="DOMMatrix<interface>/invert()<method>" data-link-for=DOMMatrix data-link-type=method href=#dom-dommatrix-invert title=invert()>invert</a>();
};
</pre>
<p>The following attributes <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m11 title=m11>m11</a> to <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m44 title=m44>m44</a> correspond to the 16 items of the matrix interfaces.

<dl data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-m11>m11<a class=self-link href=#dom-dommatrix-dommatrixreadonly-m11></a></dfn></dt>
  <dd>
    The value of the element in column 1, row 1 of the matrix.
  </dd>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-m12>m12<a class=self-link href=#dom-dommatrix-dommatrixreadonly-m12></a></dfn></dt>
  <dd>
    The value of the element in column 1, row 2 of the matrix.
  </dd>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-m13>m13<a class=self-link href=#dom-dommatrix-dommatrixreadonly-m13></a></dfn></dt>
  <dd>
    The value of the element in column 1, row 3 of the matrix.
  </dd>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-m14>m14<a class=self-link href=#dom-dommatrix-dommatrixreadonly-m14></a></dfn></dt>
  <dd>
    The value of the element in column 1, row 4 of the matrix.
  </dd>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-m21>m21<a class=self-link href=#dom-dommatrix-dommatrixreadonly-m21></a></dfn></dt>
  <dd>
    The value of the element in column 2, row 1 of the matrix.
  </dd>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-m22>m22<a class=self-link href=#dom-dommatrix-dommatrixreadonly-m22></a></dfn></dt>
  <dd>
    The value of the element in column 2, row 2 of the matrix.
  </dd>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-m23>m23<a class=self-link href=#dom-dommatrix-dommatrixreadonly-m23></a></dfn></dt>
  <dd>
    The value of the element in column 2, row 3 of the matrix.
  </dd>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-m24>m24<a class=self-link href=#dom-dommatrix-dommatrixreadonly-m24></a></dfn></dt>
  <dd>
    The value of the element in column 2, row 4 of the matrix.
  </dd>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-m31>m31<a class=self-link href=#dom-dommatrix-dommatrixreadonly-m31></a></dfn></dt>
  <dd>
    The value of the element in column 3, row 1 of the matrix.
  </dd>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-m32>m32<a class=self-link href=#dom-dommatrix-dommatrixreadonly-m32></a></dfn></dt>
  <dd>
    The value of the element in column 3, row 2 of the matrix.
  </dd>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-m33>m33<a class=self-link href=#dom-dommatrix-dommatrixreadonly-m33></a></dfn></dt>
  <dd>
    The value of the element in column 3, row 3 of the matrix.
  </dd>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-m34>m34<a class=self-link href=#dom-dommatrix-dommatrixreadonly-m34></a></dfn></dt>
  <dd>
    The value of the element in column 3, row 4 of the matrix.
  </dd>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-m41>m41<a class=self-link href=#dom-dommatrix-dommatrixreadonly-m41></a></dfn></dt>
  <dd>
    The value of the element in column 4, row 1 of the matrix.
  </dd>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-m42>m42<a class=self-link href=#dom-dommatrix-dommatrixreadonly-m42></a></dfn></dt>
  <dd>
    The value of the element in column 4, row 2 of the matrix.
  </dd>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-m43>m43<a class=self-link href=#dom-dommatrix-dommatrixreadonly-m43></a></dfn></dt>
  <dd>
    The value of the element in column 4, row 3 of the matrix.
  </dd>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-m44>m44<a class=self-link href=#dom-dommatrix-dommatrixreadonly-m44></a></dfn></dt>
  <dd>
    The value of the element in column 4, row 4 of the matrix.
  </dd>
</dl>

<p>The following attributes <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-a title=a>a</a> to <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-b title=b>b</a> corresponde to the 2D components of the matrix interfaces.

<dl data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-a>a<a class=self-link href=#dom-dommatrix-dommatrixreadonly-a></a></dfn></dt>
  <dd>
    Corresponds to the attribute <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m11 title=m11>m11</a>.
  </dd>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-b>b<a class=self-link href=#dom-dommatrix-dommatrixreadonly-b></a></dfn></dt>
  <dd>
    Corresponds to the attribute <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m12 title=m12>m12</a>.
  </dd>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-c>c<a class=self-link href=#dom-dommatrix-dommatrixreadonly-c></a></dfn></dt>
  <dd>
    Corresponds to the attribute <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m21 title=m21>m21</a>.
  </dd>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-d>d<a class=self-link href=#dom-dommatrix-dommatrixreadonly-d></a></dfn></dt>
  <dd>
    Corresponds to the attribute <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m22 title=m22>m22</a>.
  </dd>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-e>e<a class=self-link href=#dom-dommatrix-dommatrixreadonly-e></a></dfn></dt>
  <dd>
    Corresponds to the attribute <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m41 title=m41>m41</a>.
  </dd>
  <dt><dfn class=idl-code data-dfn-for="DOMMatrix DOMMatrixReadOnly" data-dfn-type=attribute data-export="" id=dom-dommatrix-dommatrixreadonly-f>f<a class=self-link href=#dom-dommatrix-dommatrixreadonly-f></a></dfn></dt>
  <dd>
    Corresponds to the attribute <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m42 title=m42>m42</a>.
  </dd>
</dl>

<p>The <dfn class=idl-code data-dfn-for=DOMMatrix data-dfn-type=constructor data-export="" id=dom-dommatrix-dommatrix title=dommatrix()><code>DOMMatrix()</code><a class=self-link href=#dom-dommatrix-dommatrix></a></dfn> constructor, when invoked, must run the following steps:

<ol>
  <li>If invoked without arguments:
    <ol>
      <li></li>
    
  </ol>
  <li>If invoked with a <a class=idl-code data-link-type=interface title=domstring>DOMString</a> argument <var>transformList</var>:</li>
  <li>If invoked with a <a class=idl-code data-link-type=interface href=#dom-dommatrixreadonly title=dommatrixreadonly>DOMMatrixReadOnly</a> argument <var>other</var>:</li>
  <li>If invoked with a <a class=idl-code data-link-type=interface title=float32array>Float32Array</a> argument <var>array32</var>:</li>
  <li>If invoked with a <a class=idl-code data-link-type=interface title=float64array>Float64Array</a> argument <var>array64</var>:</li>
  <li>If invoked with a sequence&lt;unrestricted double&gt; argument <var>numberSequence</var></li>
</ol>

<p>The following methods do not modify the current matrix and return a new <a class=idl-code data-link-type=interface href=#dom-dommatrix title=dommatrix>DOMMatrix</a> object.

<dl data-dfn-for=DOMMatrixReadOnly data-dfn-type=method>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrixReadOnly data-dfn-type=method data-export="" id=dom-dommatrixreadonly-translate title=translate()>translate(<var>tx</var>, <var>ty</var>, <var>tz</var>)<a class=self-link href=#dom-dommatrixreadonly-translate></a></dfn></dt>
  <dd>
    <p>Post-multiplies a translation transformation on the current matrix and returns the resulting matrix. The current matrix is not modified.
    <p>The 3D translation matrix is <a href=http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#Translate3dDefined>described</a> in CSS Transforms <a data-biblio-type=normative data-link-type=biblio href=#css3-transforms title=css3-transforms>[CSS3-TRANSFORMS]</a>.
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrixReadOnly data-dfn-type=method data-export="" id=dom-dommatrixreadonly-scale title=scale()>scale(<var>scale</var>, <var>originX</var>, <var>originY</var>)<a class=self-link href=#dom-dommatrixreadonly-scale></a></dfn></dt>
  <dd>
    <p>Post-multiplies a uniform 2D scale transformation (<a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m11 title=m11>m11</a> = <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m22 title=m22>m22</a> = <em>scale</em>) on the current matrix with the given origin and returns the resulting matrix. The current matrix is not modified.
    <p>The 2D scale matrix is <a href=http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#ScaleDefined>described</a> in CSS Transforms with <em>sx</em> = <em>sy</em> = <em>scale</em>. This does not include the origin translation. <a data-biblio-type=normative data-link-type=biblio href=#css3-transforms title=css3-transforms>[CSS3-TRANSFORMS]</a>.
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrixReadOnly data-dfn-type=method data-export="" id=dom-dommatrixreadonly-scale3d title=scale3d()>scale3d(<var>scale</var>, <var>originX</var>, <var>originY</var>, <var>originZ</var>)<a class=self-link href=#dom-dommatrixreadonly-scale3d></a></dfn></dt>
  <dd>
    <p>Post-multiplies a uniform scale transformation (<a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m11 title=m11>m11</a> = <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m22 title=m22>m22</a> = <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m33 title=m33>m33</a> = <em>scale</em>) on the current matrix with the given origin and returns the resulting matrix. The current matrix is not modified.
    <p>The 3D scale matrix is <a href=http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#Scale3dDefined>described</a> in CSS Transforms with <em>sx</em> = <em>sy</em> = <em>sz</em> = <em>scale</em>. This does not include the origin translation. <a data-biblio-type=normative data-link-type=biblio href=#css3-transforms title=css3-transforms>[CSS3-TRANSFORMS]</a>.
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrixReadOnly data-dfn-type=method data-export="" id=dom-dommatrixreadonly-scalenonuniform title=scalenonuniform()>scaleNonUniform(<var>scaleX</var>, <var>scaleY</var>, <var>scaleZ</var>, <var>originX</var>, <var>originY</var>, <var>originZ</var>)<a class=self-link href=#dom-dommatrixreadonly-scalenonuniform></a></dfn></dt>
  <dd>
    <p>Post-multiplies a non-uniform scale transformation on the current matrix with the given origin and returns the resulting matrix. The current matrix is not modified.
    <p>The 3D scale matrix is <a href=http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#Scale3dDefined>described</a> in CSS Transforms with &lt;<em>sx</em> = <em>scaleX</em>, <em>sy</em> = <em>scaleY</em> and <em>sz</em> = <em>scaleZ</em>. This does not include the origin translation. <a data-biblio-type=normative data-link-type=biblio href=#css3-transforms title=css3-transforms>[CSS3-TRANSFORMS]</a>.
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrixReadOnly data-dfn-type=method data-export="" id=dom-dommatrixreadonly-rotate title=rotate()>rotate(<var>angle</var>, <var>originX</var>, <var>originY</var>)<a class=self-link href=#dom-dommatrixreadonly-rotate></a></dfn></dt>
  <dd>
    <p>Post-multiplies a rotation transformation on the current matrix with the given origin and returns the resulting matrix. The current matrix is not modified.
    <p>The 2D rotation matrix is <a href=http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#RotateDefined>described</a> in CSS Transforms with <em>alpha</em> = <em>angle</em>. This does not include the origin translation. <a data-biblio-type=normative data-link-type=biblio href=#css3-transforms title=css3-transforms>[CSS3-TRANSFORMS]</a>.
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrixReadOnly data-dfn-type=method data-export="" id=dom-dommatrixreadonly-rotatefromvector title=rotatefromvector()>rotateFromVector(<var>x</var>, <var>y</var>)<a class=self-link href=#dom-dommatrixreadonly-rotatefromvector></a></dfn></dt>
  <dd>
    <p>Post-multiplies a rotation transformation on the current matrix and returns the resulting matrix. The rotation angle is determined by the angle between the vector (1,0)<sup>T</sup> and (<em>x</em>,<em>y</em>)<sup>T</sup> in the clockwise direction. If <em>x</em> and <em>y</em> should both be zero, the angle is specified as zero. The current matrix is not modified.</p>
    <p>The 2D rotation matrix is described in CSS Transforms where alpha is the angle between the vector (1,0)<sup>T</sup> and (<em>x</em>,<em>y</em>)<sup>T</sup> in degrees <a data-biblio-type=normative data-link-type=biblio href=#css3-transforms title=css3-transforms>[CSS3-TRANSFORMS]</a>.</p>
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrixReadOnly data-dfn-type=method data-export="" id=dom-dommatrixreadonly-rotateaxisangle title=rotateaxisangle()>rotateAxisAngle(<var>x</var>, <var>y</var>, <var>z</var>, <var>angle</var>)<a class=self-link href=#dom-dommatrixreadonly-rotateaxisangle></a></dfn></dt>
  <dd>
    <p>Post-multiplies a rotation transformation on the current matrix and returns the resulting matrix. The rotation of the transform is applied around the given vector. The current matrix is not modified.</p>
    <p class=issue id=issue-70fc7f38><a class=self-link href=#issue-70fc7f38></a>What if all components of <a class=idl-code data-link-type=method href=#dom-dommatrixreadonly-rotateaxisangle title=rotateaxisangle()>rotateAxisAngle()</a> are 0 or undefined?</p>
    <p>The 3D rotation matrix is <a href=http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#Rotate3dDefined>described</a> in CSS Transforms with <code>alpha = angle</code> <a data-biblio-type=normative data-link-type=biblio href=#css3-transforms title=css3-transforms>[CSS3-TRANSFORMS]</a>.</p>
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrixReadOnly data-dfn-type=method data-export="" id=dom-dommatrixreadonly-skewx title=skewx()>skewX(<var>sx</var>)<a class=self-link href=#dom-dommatrixreadonly-skewx></a></dfn></dt>
  <dd>
    <p>Post-multiplies a skewX transformation on the current matrix and returns the resulting matrix. The current matrix is not modified.</p>
    <p>The 2D skewX matrix is <a href=http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#SkewXDefined>described</a> in CSS Transforms with <em>alpha</em> = <em>sx</em> <a data-biblio-type=normative data-link-type=biblio href=#css3-transforms title=css3-transforms>[CSS3-TRANSFORMS]</a>.</p>
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrixReadOnly data-dfn-type=method data-export="" id=dom-dommatrixreadonly-skewy title=skewy()>skewY(<var>sy</var>)<a class=self-link href=#dom-dommatrixreadonly-skewy></a></dfn></dt>
  <dd>
    <p>Post-multiplies a skewX transformation on the current matrix and returns the resulting matrix.</p>
    <p>The 2D skewY matrix is <a href=http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#SkewYDefined>described</a> in CSS Transforms with <em>beta</em> = <em>sy</em> <a data-biblio-type=normative data-link-type=biblio href=#css3-transforms title=css3-transforms>[CSS3-TRANSFORMS]</a>.</p>
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrixReadOnly data-dfn-type=method data-export="" id=dom-dommatrixreadonly-multiply title=multiply()>multiply(<var>other</var>)<a class=self-link href=#dom-dommatrixreadonly-multiply></a></dfn></dt>
  <dd>
    Performs matrix multiplication. This matrix is post-multiplied by the  matrix <em>other</em>, returning the resulting new matrix. The current matrix is not modified.
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrixReadOnly data-dfn-type=method data-export="" id=dom-dommatrixreadonly-flipx title=flipx()>flipX()<a class=self-link href=#dom-dommatrixreadonly-flipx></a></dfn></dt>
  <dd>
    Post-multiplies the transformation <code>DOMMatrix(-1, 0, 0, 1, 0, 0)</code> and returns the resulting matrix. The current matrix is not modified.
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrixReadOnly data-dfn-type=method data-export="" id=dom-dommatrixreadonly-flipy title=flipy()>flipY()<a class=self-link href=#dom-dommatrixreadonly-flipy></a></dfn></dt>
  <dd>
    Post-multiplies the transformation <code>DOMMatrix(1, 0, 0, -1, 0, 0)</code> and returns the resulting matrix. The current matrix is not modified.
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrixReadOnly data-dfn-type=method data-export="" id=dom-dommatrixreadonly-inverse title=inverse()>inverse()<a class=self-link href=#dom-dommatrixreadonly-inverse></a></dfn></dt>
  <dd>
    Returns the inverted matrix of the current matrix. The current matrix is not modified.
  </dd>
</dl>

<p class=issue id=issue-b394af0e><a class=self-link href=#issue-b394af0e></a>Should unit-less values (like for SVG transform presentation attribute) be allowed as string input for the constructor too? <span class=css data-link-type=maybe title=translate(20,20)>translate(20,20)</span></p>

<p>The following methods do modify the current matrix.

<dl data-dfn-for=DOMMatrix data-dfn-type=method>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrix data-dfn-type=method data-export="" id=dom-dommatrix-multiplyby title=multiplyby()>multiplyBy(<var>other</var>)<a class=self-link href=#dom-dommatrix-multiplyby></a></dfn></dt>
  <dd>
    The <em>other</em> matrix gets post-multiplied to the current matrix.
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrix data-dfn-type=method data-export="" id=dom-dommatrix-premultiplyby title=premultiplyby()>preMultiplyBy(<var>other</var>)<a class=self-link href=#dom-dommatrix-premultiplyby></a></dfn></dt>
  <dd>
    The <em>other</em> matrix gets pre-multiplied to the current matrix.
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrix data-dfn-type=method data-export="" id=dom-dommatrix-translateby title=translateby()>translateBy(<var>tx</var>, <var>ty</var>, <var>tz</var>)<a class=self-link href=#dom-dommatrix-translateby></a></dfn></dt>
  <dd>
    <p>Post-multiplies a translation transformation on the current matrix.</p>
    <p>The 3D translation matrix is <a href=http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#Translate3dDefined>described</a> in CSS Transforms <a data-biblio-type=normative data-link-type=biblio href=#css3-transforms title=css3-transforms>[CSS3-TRANSFORMS]</a>.</p>
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrix data-dfn-type=method data-export="" id=dom-dommatrix-scaleby title=scaleby()>scaleBy(<var>scale</var>, <var>originX</var>, <var>originY</var>)<a class=self-link href=#dom-dommatrix-scaleby></a></dfn></dt>
  <dd>
    <p>Post-multiplies a uniform 2D scale transformation (<a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m11 title=m11>m11</a> = <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m22 title=m22>m22</a> = <em>scale</em>) on the current matrix with the given origin.</p>
    <p>The 2D scale matrix is <a href=http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#ScaleDefined>described</a> in CSS Transforms with <em>sx</em> = <em>sy</em> = <em>scale</em>. This does not include the origin translation. <a data-biblio-type=normative data-link-type=biblio href=#css3-transforms title=css3-transforms>[CSS3-TRANSFORMS]</a>.</p>
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrix data-dfn-type=method data-export="" id=dom-dommatrix-scale3dby title=scale3dby()>scale3dBy(<var>scale</var>, <var>originX</var>, <var>originY</var>, <var>originZ</var>)<a class=self-link href=#dom-dommatrix-scale3dby></a></dfn></dt>
  <dd>
    <p>Post-multiplies a uniform 2D scale transformation (<a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m11 title=m11>m11</a> = <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m22 title=m22>m22</a> = <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m33 title=m33>m33</a> = <em>scale</em>) on the current matrix with the given origin.</p>
    <p>The 3D scale matrix is <a href=http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#Scale3dDefined>described</a> in CSS Transforms with <em>sx</em> = <em>sy</em> = <em>sz</em> = <em>scale</em>. This does not include the origin translation. <a data-biblio-type=normative data-link-type=biblio href=#css3-transforms title=css3-transforms>[CSS3-TRANSFORMS]</a>.</p>
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrix data-dfn-type=method data-export="" id=dom-dommatrix-scalenonuniformby title=scalenonuniformby()>scaleNonUniformBy(<var>scaleX</var>, <var>scaleY</var>, <var>scaleZ</var>, <var>originX</var>, <var>originY</var>, <var>originZ</var>)<a class=self-link href=#dom-dommatrix-scalenonuniformby></a></dfn></dt>
  <dd>
    <p>Post-multiplies a non-uniform scale transformation on the current matrix with the given origin.</p>
    <p>The 3D scale matrix is <a href=http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#Scale3dDefined>described</a> in CSS Transforms with <em>sx</em> = <em>scaleX</em>,  <em>sy</em> = <em>scaleY</em> and <em>sz</em> = <em>scaleZ</em>. This does not include the origin translation. <a data-biblio-type=normative data-link-type=biblio href=#css3-transforms title=css3-transforms>[CSS3-TRANSFORMS]</a>.</p>
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrix data-dfn-type=method data-export="" id=dom-dommatrix-rotateby title=rotateby()>rotateBy(<var>angle</var>, <var>originX</var>, <var>originY</var>)<a class=self-link href=#dom-dommatrix-rotateby></a></dfn></dt>
  <dd>
    <p>Post-multiplies a rotation transformation on the current matrix with the given origin.</p>
    <p>The 2D rotation matrix is <a href=http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#RotateDefined>described</a> in CSS Transforms with <em>alpha</em> = <em>angle</em>. This does not include the origin translation. <a data-biblio-type=normative data-link-type=biblio href=#css3-transforms title=css3-transforms>[CSS3-TRANSFORMS]</a>.</p>
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrix data-dfn-type=method data-export="" id=dom-dommatrix-rotatefromvectorby title=rotatefromvectorby()>rotateFromVectorBy(<var>x</var>, <var>y</var>)<a class=self-link href=#dom-dommatrix-rotatefromvectorby></a></dfn></dt>
  <dd>
    <p>Post-multiplies a rotation transformation on the current matrix. The rotation angle is determined by the angle between the vector (1,0)<sup>T</sup> and (<em>x</em>,<em>y</em>)<sup>T</sup> in the clockwise direction. If <em>x</em> and <em>y</em> should both be zero, the angle is specified as zero.</p>
    <p>The 2D rotation matrix is <a href=http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#RotateDefined>described</a> in CSS Transforms where <code>alpha</code> is the angle between the vector (1,0)<sup>T</sup> and (<em>x</em>,<em>y</em>)<sup>T</sup> in degrees <a data-biblio-type=normative data-link-type=biblio href=#css3-transforms title=css3-transforms>[CSS3-TRANSFORMS]</a>.</p>
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrix data-dfn-type=method data-export="" id=dom-dommatrix-rotateaxisangleby title=rotateaxisangleby()>rotateAxisAngleBy(<var>x</var>, <var>y</var>, <var>z</var>, <var>angle</var>)<a class=self-link href=#dom-dommatrix-rotateaxisangleby></a></dfn></dt>
  <dd>
    <p>Post-multiplies a rotation transformation on the current matrix. The rotation of the transform is applied around the given vector.</p>
    <p>The 3D rotation matrix is <a href=http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#Rotate3dDefined>described</a> in CSS Transforms with <em>alpha</em> = <em>angle</em> <a data-biblio-type=normative data-link-type=biblio href=#css3-transforms title=css3-transforms>[CSS3-TRANSFORMS]</a>.</p>
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrix data-dfn-type=method data-export="" id=dom-dommatrix-skewxby title=skewxby()>skewXBy(<var>sx</var>)<a class=self-link href=#dom-dommatrix-skewxby></a></dfn></dt>
  <dd>
    <p>Post-multiplies a skewX transformation on the current matrix.</p>
    <p>The 2D skewX matrix is <a href=http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#SkewXDefined>described</a> in CSS Transforms with <em>alpha</em> = <em>sx</em> <a data-biblio-type=normative data-link-type=biblio href=#css3-transforms title=css3-transforms>[CSS3-TRANSFORMS]</a>.</p>
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrix data-dfn-type=method data-export="" id=dom-dommatrix-skewyby title=skewyby()>skewYBy(<var>sy</var>)<a class=self-link href=#dom-dommatrix-skewyby></a></dfn></dt>
  <dd>
    <p>Post-multiplies a skewX transformation on the current matrix.</p>
    <p>The 2D skewY matrix is <a href=http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#SkewYDefined>described</a> in CSS Transforms with <em>beta</em> = <em>sy</em> <a data-biblio-type=normative data-link-type=biblio href=#css3-transforms title=css3-transforms>[CSS3-TRANSFORMS]</a>.</p>
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrix data-dfn-type=method data-export="" id=dom-dommatrix-invert title=invert()>invert()<a class=self-link href=#dom-dommatrix-invert></a></dfn></dt>
  <dd>
    Inverts the current matrix.
  </dd>
</dl>

<p>The following methods can be used to get general information about transformation matrices.

<dl data-dfn-for=DOMMatrixReadOnly data-dfn-type=method>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrixReadOnly data-dfn-type=method data-export="" id=dom-dommatrixreadonly-is2d title=is2d()>is2d()<a class=self-link href=#dom-dommatrixreadonly-is2d></a></dfn></dt>
  <dd>
    Returns true if <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m13 title=m13>m13</a>, <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m14 title=m14>m14</a>, <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m23 title=m23>m23</a>, <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m24 title=m24>m24</a>, <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m31 title=m31>m31</a>, <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m32 title=m32>m32</a>, <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m34 title=m34>m34</a>, <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m43 title=m43>m43</a> are equal to zero and <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m33 title=m33>m33</a>, <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m44 title=m44>m44</a> are equal to one.
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrixReadOnly data-dfn-type=method data-export="" id=dom-dommatrixreadonly-determinant title=determinant()>determinant()<a class=self-link href=#dom-dommatrixreadonly-determinant></a></dfn></dt>
  <dd>
    Returns the determinant of the current matrix.
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrixReadOnly data-dfn-type=method data-export="" id=dom-dommatrixreadonly-transformpoint title=transformpoint()>transformPoint()<a class=self-link href=#dom-dommatrixreadonly-transformpoint></a></dfn></dt>
  <dd>
    The point argument is post-multiplied on the current matrix and returns the resulting point. The passed argument does not get modified.
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrixReadOnly data-dfn-type=method data-export="" id=dom-dommatrixreadonly-tofloat32array title=tofloat32array()>toFloat32Array()<a class=self-link href=#dom-dommatrixreadonly-tofloat32array></a></dfn></dt>
  <dd>
    Returns the serialized 16 elements <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m11 title=m11>m11</a> to <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m44 title=m44>m44</a> of the current matrix in column-major order as <a class=idl-code data-link-type=interface title=float32array>Float32Array</a> <a data-biblio-type=informative data-link-type=biblio href=#typedarray title=typedarray>[typedarray]</a>.
  </dd>
  <dt><dfn class=idl-code data-dfn-for=DOMMatrixReadOnly data-dfn-type=method data-export="" id=dom-dommatrixreadonly-tofloat64array title=tofloat64array()>toFloat64Array()<a class=self-link href=#dom-dommatrixreadonly-tofloat64array></a></dfn></dt>
  <dd>
    Returns the serialized 16 elements <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m11 title=m11>m11</a> to <a class=idl-code data-link-type=attribute href=#dom-dommatrix-dommatrixreadonly-m44 title=m44>m44</a> of the current matrix in column-major order as <a class=idl-code data-link-type=interface title=float64array>Float64Array</a> <a data-biblio-type=informative data-link-type=biblio href=#typedarray title=typedarray>[typedarray]</a>.
  </dd>
</dl>
<h2 class="no-ref no-num heading settled heading" id=conformance><span class=content>
Conformance</span><a class=self-link href=#conformance></a></h2>

<h3 class="no-ref heading settled heading" id=conventions><span class=content>
Document conventions</span><a class=self-link href=#conventions></a></h3>

    <p>Conformance requirements are expressed with a combination of
    descriptive assertions and RFC 2119 terminology. The key words "MUST",
    "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
    "RECOMMENDED", "MAY", and "OPTIONAL" in the normative parts of this
    document are to be interpreted as described in RFC 2119.
    However, for readability, these words do not appear in all uppercase
    letters in this specification.

    <p>All of the text of this specification is normative except sections
    explicitly marked as non-normative, examples, and notes. <a data-biblio-type=normative data-link-type=biblio href=#rfc2119 title=rfc2119>[RFC2119]</a></p>

    <p>Examples in this specification are introduced with the words "for example"
    or are set apart from the normative text with <code>class="example"</code>,
    like this:

    <div class=example>
        <p>This is an example of an informative example.</p>
    </div>

    <p>Informative notes begin with the word "Note" and are set apart from the
    normative text with <code>class="note"</code>, like this:

    <p class=note>Note, this is an informative note.</p>

<h3 class="no-ref heading settled heading" id=conformance-classes><span class=content>
Conformance classes</span><a class=self-link href=#conformance-classes></a></h3>

    <p>Conformance to this specification
    is defined for three conformance classes:
    <dl>
        <dt>style sheet
            <dd>A <a href=http://www.w3.org/TR/CSS21/conform.html#style-sheet>CSS
            style sheet</a>.
        <dt>renderer
            <dd>A <a href=http://www.w3.org/TR/CSS21/conform.html#user-agent>UA</a>
            that interprets the semantics of a style sheet and renders
            documents that use them.
        <dt>authoring tool
            <dd>A <a href=http://www.w3.org/TR/CSS21/conform.html#user-agent>UA</a>
            that writes a style sheet.
    </dl>

    <p>A style sheet is conformant to this specification
    if all of its statements that use syntax defined in this module are valid
    according to the generic CSS grammar and the individual grammars of each
    feature defined in this module.

    <p>A renderer is conformant to this specification
    if, in addition to interpreting the style sheet as defined by the
    appropriate specifications, it supports all the features defined
    by this specification by parsing them correctly
    and rendering the document accordingly. However, the inability of a
    UA to correctly render a document due to limitations of the device
    does not make the UA non-conformant. (For example, a UA is not
    required to render color on a monochrome monitor.)

    <p>An authoring tool is conformant to this specification
    if it writes style sheets that are syntactically correct according to the
    generic CSS grammar and the individual grammars of each feature in
    this module, and meet all other conformance requirements of style sheets
    as described in this module.

<h3 class="no-ref heading settled heading" id=partial><span class=content>
Partial implementations</span><a class=self-link href=#partial></a></h3>

    <p>So that authors can exploit the forward-compatible parsing rules to
    assign fallback values, CSS renderers <strong>must</strong>
    treat as invalid (and <a href=http://www.w3.org/TR/CSS21/conform.html#ignore>ignore
    as appropriate</a>) any at-rules, properties, property values, keywords,
    and other syntactic constructs for which they have no usable level of
    support. In particular, user agents <strong>must not</strong> selectively
    ignore unsupported component values and honor supported values in a single
    multi-value property declaration: if any value is considered invalid
    (as unsupported values must be), CSS requires that the entire declaration
    be ignored.</p>

<h3 class="no-ref heading settled heading" id=experimental><span class=content>
Experimental implementations</span><a class=self-link href=#experimental></a></h3>

    <p>To avoid clashes with future CSS features, the CSS2.1 specification
    reserves a <a href=http://www.w3.org/TR/CSS21/syndata.html#vendor-keywords>prefixed
    syntax</a> for proprietary and experimental extensions to CSS.

    <p>Prior to a specification reaching the Candidate Recommendation stage
    in the W3C process, all implementations of a CSS feature are considered
    experimental. The CSS Working Group recommends that implementations
    use a vendor-prefixed syntax for such features, including those in
    W3C Working Drafts. This avoids incompatibilities with future changes
    in the draft.
    </p>

<h3 class="no-ref heading settled heading" id=testing><span class=content>
Non-experimental implementations</span><a class=self-link href=#testing></a></h3>

    <p>Once a specification reaches the Candidate Recommendation stage,
    non-experimental implementations are possible, and implementors should
    release an unprefixed implementation of any CR-level feature they
    can demonstrate to be correctly implemented according to spec.

    <p>To establish and maintain the interoperability of CSS across
    implementations, the CSS Working Group requests that non-experimental
    CSS renderers submit an implementation report (and, if necessary, the
    testcases used for that implementation report) to the W3C before
    releasing an unprefixed implementation of any CSS features. Testcases
    submitted to W3C are subject to review and correction by the CSS
    Working Group.

    <p>Further information on submitting testcases and implementation reports
    can be found from on the CSS Working Group’s website at
    <a href=http://www.w3.org/Style/CSS/Test/>http://www.w3.org/Style/CSS/Test/</a>.
    Questions should be directed to the
    <a href=http://lists.w3.org/Archives/Public/public-css-testsuite>public-css-testsuite@w3.org</a>
    mailing list.

<h2 class="no-num no-ref heading settled heading" id=references><span class=content>
References</span><a class=self-link href=#references></a></h2>

<h3 class="no-num no-ref heading settled heading" id=normative><span class=content>
Normative References</span><a class=self-link href=#normative></a></h3>
<div data-fill-with=normative-references><dl><dt id=css3-transforms title=CSS3-TRANSFORMS><a class=self-link href=#css3-transforms></a>[CSS3-TRANSFORMS]<dd>Simon Fraser; et al. <a href=http://www.w3.org/TR/2012/WD-css3-transforms-20120911/>CSS Transforms</a>. 11 September 2012. W3C Working Draft. (Work in progress.) URL: <a href=http://www.w3.org/TR/2012/WD-css3-transforms-20120911/>http://www.w3.org/TR/2012/WD-css3-transforms-20120911/</a><dt id=rfc2119 title=RFC2119><a class=self-link href=#rfc2119></a>[RFC2119]<dd>S. Bradner. <a href=http://www.ietf.org/rfc/rfc2119.txt>Key words for use in RFCs to Indicate Requirement Levels</a>. URL: <a href=http://www.ietf.org/rfc/rfc2119.txt>http://www.ietf.org/rfc/rfc2119.txt</a></dl></div>

<h3 class="no-num no-ref heading settled heading" id=informative><span class=content>
Informative References</span><a class=self-link href=#informative></a></h3>
<div data-fill-with=informative-references><dl><dt id=svg11 title=SVG11><a class=self-link href=#svg11></a>[SVG11]<dd>Erik Dahlström; et al. <a href=http://www.w3.org/TR/2011/REC-SVG11-20110816/>Scalable Vector Graphics (SVG) 1.1 (Second Edition)</a>. 16 August 2011. W3C Recommendation. URL: <a href=http://www.w3.org/TR/2011/REC-SVG11-20110816/>http://www.w3.org/TR/2011/REC-SVG11-20110816/</a><dt id=typedarray title=typedarray><a class=self-link href=#typedarray></a>[typedarray]<dd>David Herman; Kenneth Russell. <a href=https://www.khronos.org/registry/typedarray/specs/latest/>Typed Array Specification</a>. 2013-06-26. Khronos Working Draft. URL: <a href=https://www.khronos.org/registry/typedarray/specs/latest/>https://www.khronos.org/registry/typedarray/specs/latest/</a></dl></div>

<h2 class="no-num no-ref heading settled heading" id=index><span class=content>
Index</span><a class=self-link href=#index></a></h2>
<div data-fill-with=index><ul class=indexlist>
<li>a, <a href=#dom-dommatrix-dommatrixreadonly-a title="section 7">7</a>
<li>angle<ul><li>argument for DOMMatrixReadOnly/rotate(), <a href=#dom-dommatrixreadonlyrotate-angle title="section 7">7</a>
<li>argument for DOMMatrixReadOnly/rotateAxisAngle(), <a href=#dom-dommatrixreadonlyrotateaxisangle-angle title="section 7">7</a>
<li>argument for DOMMatrix/rotateBy(), <a href=#dom-dommatrixrotateby-angle title="section 7">7</a>
<li>argument for DOMMatrix/rotateAxisAngleBy(), <a href=#dom-dommatrixrotateaxisangleby-angle title="section 7">7</a>
</ul><li>array32, <a href=#dom-dommatrixdommatrix-array32 title="section 7">7</a>
<li>array64, <a href=#dom-dommatrixdommatrix-array64 title="section 7">7</a>
<li>associated bounding rectangle, <a href=#associated-bounding-rectangle title="section 6">6</a>
<li>b, <a href=#dom-dommatrix-dommatrixreadonly-b title="section 7">7</a>
<li>bottom, <a href=#dom-domrectreadonly-domrect-bottom title="section 4">4</a>
<li>bounds, <a href=#dom-domquad-bounds title="section 6">6</a>
<li>c, <a href=#dom-dommatrix-dommatrixreadonly-c title="section 7">7</a>
<li>d, <a href=#dom-dommatrix-dommatrixreadonly-d title="section 7">7</a>
<li>determinant(), <a href=#dom-dommatrixreadonly-determinant title="section 7">7</a>
<li>dommatrix(), <a href=#dom-dommatrix-dommatrix title="section 7">7</a>
<li>DOMMatrix, <a href=#dom-dommatrix title="section 7">7</a>
<li>DOMMatrixReadOnly, <a href=#dom-dommatrixreadonly title="section 7">7</a>
<li>dompoint(), <a href=#dom-dompoint-dompoint title="section 3">3</a>
<li>DOMPoint, <a href=#dom-dompoint title="section 3">3</a>
<li>DOMPointInit, <a href=#dictdef-dompointinit title="section 3">3</a>
<li>DOMPointReadOnly, <a href=#dom-dompointreadonly title="section 3">3</a>
<li>domquad(), <a href=#dom-domquad-domquad title="section 6">6</a>
<li>DOMQuad, <a href=#dom-domquad title="section 6">6</a>
<li>DOMRect, <a href=#dom-domrect title="section 4">4</a>
<li>domrect(), <a href=#dom-domrect-domrect title="section 4">4</a>
<li>DOMRectList, <a href=#dom-domrectlist title="section 5">5</a>
<li>DOMRectReadOnly, <a href=#dom-domrectreadonly title="section 4">4</a>
<li>e, <a href=#dom-dommatrix-dommatrixreadonly-e title="section 7">7</a>
<li>f, <a href=#dom-dommatrix-dommatrixreadonly-f title="section 7">7</a>
<li>flipx(), <a href=#dom-dommatrixreadonly-flipx title="section 7">7</a>
<li>flipy(), <a href=#dom-dommatrixreadonly-flipy title="section 7">7</a>
<li>height<ul><li>definition of, <a href=#height title="section 4">4</a>
<li>argument for DOMRect/DOMRect(), <a href=#dom-domrectdomrect-height title="section 4">4</a>
<li>attribute for DOMRectReadOnly, DOMRect, <a href=#dom-domrectreadonly-domrect-height title="section 4">4</a>
</ul><li>index, <a href=#dom-domrectlistitem-index title="section 5">5</a>
<li>inverse(), <a href=#dom-dommatrixreadonly-inverse title="section 7">7</a>
<li>invert(), <a href=#dom-dommatrix-invert title="section 7">7</a>
<li>is2d(), <a href=#dom-dommatrixreadonly-is2d title="section 7">7</a>
<li>item(), <a href=#dom-domrectlist-item title="section 5">5</a>
<li>left, <a href=#dom-domrectreadonly-domrect-left title="section 4">4</a>
<li>length, <a href=#dom-domrectlist-length title="section 5">5</a>
<li>m11, <a href=#dom-dommatrix-dommatrixreadonly-m11 title="section 7">7</a>
<li>m12, <a href=#dom-dommatrix-dommatrixreadonly-m12 title="section 7">7</a>
<li>m13, <a href=#dom-dommatrix-dommatrixreadonly-m13 title="section 7">7</a>
<li>m14, <a href=#dom-dommatrix-dommatrixreadonly-m14 title="section 7">7</a>
<li>m21, <a href=#dom-dommatrix-dommatrixreadonly-m21 title="section 7">7</a>
<li>m22, <a href=#dom-dommatrix-dommatrixreadonly-m22 title="section 7">7</a>
<li>m23, <a href=#dom-dommatrix-dommatrixreadonly-m23 title="section 7">7</a>
<li>m24, <a href=#dom-dommatrix-dommatrixreadonly-m24 title="section 7">7</a>
<li>m31, <a href=#dom-dommatrix-dommatrixreadonly-m31 title="section 7">7</a>
<li>m32, <a href=#dom-dommatrix-dommatrixreadonly-m32 title="section 7">7</a>
<li>m33, <a href=#dom-dommatrix-dommatrixreadonly-m33 title="section 7">7</a>
<li>m34, <a href=#dom-dommatrix-dommatrixreadonly-m34 title="section 7">7</a>
<li>m41, <a href=#dom-dommatrix-dommatrixreadonly-m41 title="section 7">7</a>
<li>m42, <a href=#dom-dommatrix-dommatrixreadonly-m42 title="section 7">7</a>
<li>m43, <a href=#dom-dommatrix-dommatrixreadonly-m43 title="section 7">7</a>
<li>m44, <a href=#dom-dommatrix-dommatrixreadonly-m44 title="section 7">7</a>
<li>multiply(), <a href=#dom-dommatrixreadonly-multiply title="section 7">7</a>
<li>multiply, <a href=#multiply title="section 2">2</a>
<li>multiplyby(), <a href=#dom-dommatrix-multiplyby title="section 7">7</a>
<li>numberSequence, <a href=#dom-dommatrixdommatrix-numbersequence title="section 7">7</a>
<li>origin, <a href=#origin title="section 4">4</a>
<li>originX<ul><li>argument for DOMMatrixReadOnly/scale(), <a href=#dom-dommatrixreadonlyscale-originx title="section 7">7</a>
<li>argument for DOMMatrixReadOnly/scale3d(), <a href=#dom-dommatrixreadonlyscale3d-originx title="section 7">7</a>
<li>argument for DOMMatrixReadOnly/scaleNonUniform(), <a href=#dom-dommatrixreadonlyscalenonuniform-originx title="section 7">7</a>
<li>argument for DOMMatrixReadOnly/rotate(), <a href=#dom-dommatrixreadonlyrotate-originx title="section 7">7</a>
<li>argument for DOMMatrix/scaleBy(), <a href=#dom-dommatrixscaleby-originx title="section 7">7</a>
<li>argument for DOMMatrix/scale3dBy(), <a href=#dom-dommatrixscale3dby-originx title="section 7">7</a>
<li>argument for DOMMatrix/scaleNonUniformBy(), <a href=#dom-dommatrixscalenonuniformby-originx title="section 7">7</a>
<li>argument for DOMMatrix/rotateBy(), <a href=#dom-dommatrixrotateby-originx title="section 7">7</a>
</ul><li>originY<ul><li>argument for DOMMatrixReadOnly/scale(), <a href=#dom-dommatrixreadonlyscale-originy title="section 7">7</a>
<li>argument for DOMMatrixReadOnly/scale3d(), <a href=#dom-dommatrixreadonlyscale3d-originy title="section 7">7</a>
<li>argument for DOMMatrixReadOnly/scaleNonUniform(), <a href=#dom-dommatrixreadonlyscalenonuniform-originy title="section 7">7</a>
<li>argument for DOMMatrixReadOnly/rotate(), <a href=#dom-dommatrixreadonlyrotate-originy title="section 7">7</a>
<li>argument for DOMMatrix/scaleBy(), <a href=#dom-dommatrixscaleby-originy title="section 7">7</a>
<li>argument for DOMMatrix/scale3dBy(), <a href=#dom-dommatrixscale3dby-originy title="section 7">7</a>
<li>argument for DOMMatrix/scaleNonUniformBy(), <a href=#dom-dommatrixscalenonuniformby-originy title="section 7">7</a>
<li>argument for DOMMatrix/rotateBy(), <a href=#dom-dommatrixrotateby-originy title="section 7">7</a>
</ul><li>originZ<ul><li>argument for DOMMatrixReadOnly/scale3d(), <a href=#dom-dommatrixreadonlyscale3d-originz title="section 7">7</a>
<li>argument for DOMMatrixReadOnly/scaleNonUniform(), <a href=#dom-dommatrixreadonlyscalenonuniform-originz title="section 7">7</a>
<li>argument for DOMMatrix/scale3dBy(), <a href=#dom-dommatrixscale3dby-originz title="section 7">7</a>
<li>argument for DOMMatrix/scaleNonUniformBy(), <a href=#dom-dommatrixscalenonuniformby-originz title="section 7">7</a>
</ul><li>other<ul><li>argument for DOMMatrixReadOnly/multiply(), <a href=#dom-dommatrixreadonlymultiply-other title="section 7">7</a>
<li>argument for DOMMatrix/DOMMatrix(), <a href=#dom-dommatrixdommatrix-other title="section 7">7</a>
<li>argument for DOMMatrix/multiplyBy(), <a href=#dom-dommatrixmultiplyby-other title="section 7">7</a>
<li>argument for DOMMatrix/preMultiplyBy(), <a href=#dom-dommatrixpremultiplyby-other title="section 7">7</a>
</ul><li>p1<ul><li>argument for DOMQuad/DOMQuad(), <a href=#dom-domquaddomquad-p1 title="section 6">6</a>
<li>attribute for DOMQuad, <a href=#dom-domquad-p1 title="section 6">6</a>
</ul><li>p2<ul><li>argument for DOMQuad/DOMQuad(), <a href=#dom-domquaddomquad-p2 title="section 6">6</a>
<li>attribute for DOMQuad, <a href=#dom-domquad-p2 title="section 6">6</a>
</ul><li>p3<ul><li>argument for DOMQuad/DOMQuad(), <a href=#dom-domquaddomquad-p3 title="section 6">6</a>
<li>attribute for DOMQuad, <a href=#dom-domquad-p3 title="section 6">6</a>
</ul><li>p4<ul><li>argument for DOMQuad/DOMQuad(), <a href=#dom-domquaddomquad-p4 title="section 6">6</a>
<li>attribute for DOMQuad, <a href=#dom-domquad-p4 title="section 6">6</a>
</ul><li>point<ul><li>argument for DOMPoint/DOMPoint(), <a href=#dom-dompointdompoint-point title="section 3">3</a>
<li>argument for DOMMatrixReadOnly/transformPoint(), <a href=#dom-dommatrixreadonlytransformpoint-point title="section 7">7</a>
</ul><li>post-multiply, <a href=#post-multiply title="section 2">2</a>
<li>pre-multiply, <a href=#pre-multiply title="section 2">2</a>
<li>premultiplyby(), <a href=#dom-dommatrix-premultiplyby title="section 7">7</a>
<li>quadrilateral, <a href=#quadrilateral title="section 6">6</a>
<li>rect, <a href=#dom-domquaddomquad-rect title="section 6">6</a>
<li>rectangle, <a href=#rectangle title="section 4">4</a>
<li>right, <a href=#dom-domrectreadonly-domrect-right title="section 4">4</a>
<li>rotate(), <a href=#dom-dommatrixreadonly-rotate title="section 7">7</a>
<li>rotateaxisangle(), <a href=#dom-dommatrixreadonly-rotateaxisangle title="section 7">7</a>
<li>rotateaxisangleby(), <a href=#dom-dommatrix-rotateaxisangleby title="section 7">7</a>
<li>rotateby(), <a href=#dom-dommatrix-rotateby title="section 7">7</a>
<li>rotatefromvector(), <a href=#dom-dommatrixreadonly-rotatefromvector title="section 7">7</a>
<li>rotatefromvectorby(), <a href=#dom-dommatrix-rotatefromvectorby title="section 7">7</a>
<li>scale(), <a href=#dom-dommatrixreadonly-scale title="section 7">7</a>
<li>scale<ul><li>argument for DOMMatrixReadOnly/scale(), <a href=#dom-dommatrixreadonlyscale-scale title="section 7">7</a>
<li>argument for DOMMatrixReadOnly/scale3d(), <a href=#dom-dommatrixreadonlyscale3d-scale title="section 7">7</a>
<li>argument for DOMMatrix/scaleBy(), <a href=#dom-dommatrixscaleby-scale title="section 7">7</a>
<li>argument for DOMMatrix/scale3dBy(), <a href=#dom-dommatrixscale3dby-scale title="section 7">7</a>
</ul><li>scale3d(), <a href=#dom-dommatrixreadonly-scale3d title="section 7">7</a>
<li>scale3dby(), <a href=#dom-dommatrix-scale3dby title="section 7">7</a>
<li>scaleby(), <a href=#dom-dommatrix-scaleby title="section 7">7</a>
<li>scalenonuniform(), <a href=#dom-dommatrixreadonly-scalenonuniform title="section 7">7</a>
<li>scalenonuniformby(), <a href=#dom-dommatrix-scalenonuniformby title="section 7">7</a>
<li>scaleX<ul><li>argument for DOMMatrixReadOnly/scaleNonUniform(), <a href=#dom-dommatrixreadonlyscalenonuniform-scalex title="section 7">7</a>
<li>argument for DOMMatrix/scaleNonUniformBy(), <a href=#dom-dommatrixscalenonuniformby-scalex title="section 7">7</a>
</ul><li>scaleY<ul><li>argument for DOMMatrixReadOnly/scaleNonUniform(), <a href=#dom-dommatrixreadonlyscalenonuniform-scaley title="section 7">7</a>
<li>argument for DOMMatrix/scaleNonUniformBy(), <a href=#dom-dommatrixscalenonuniformby-scaley title="section 7">7</a>
</ul><li>scaleZ<ul><li>argument for DOMMatrixReadOnly/scaleNonUniform(), <a href=#dom-dommatrixreadonlyscalenonuniform-scalez title="section 7">7</a>
<li>argument for DOMMatrix/scaleNonUniformBy(), <a href=#dom-dommatrixscalenonuniformby-scalez title="section 7">7</a>
</ul><li>skewx(), <a href=#dom-dommatrixreadonly-skewx title="section 7">7</a>
<li>skewxby(), <a href=#dom-dommatrix-skewxby title="section 7">7</a>
<li>skewy(), <a href=#dom-dommatrixreadonly-skewy title="section 7">7</a>
<li>skewyby(), <a href=#dom-dommatrix-skewyby title="section 7">7</a>
<li>SVGMatrix, <a href=#svgmatrix title="section 7">7</a>
<li>sx<ul><li>argument for DOMMatrixReadOnly/skewX(), <a href=#dom-dommatrixreadonlyskewx-sx title="section 7">7</a>
<li>argument for DOMMatrix/skewXBy(), <a href=#dom-dommatrixskewxby-sx title="section 7">7</a>
</ul><li>sy<ul><li>argument for DOMMatrixReadOnly/skewY(), <a href=#dom-dommatrixreadonlyskewy-sy title="section 7">7</a>
<li>argument for DOMMatrix/skewYBy(), <a href=#dom-dommatrixskewyby-sy title="section 7">7</a>
</ul><li>tofloat32array(), <a href=#dom-dommatrixreadonly-tofloat32array title="section 7">7</a>
<li>tofloat64array(), <a href=#dom-dommatrixreadonly-tofloat64array title="section 7">7</a>
<li>top, <a href=#dom-domrectreadonly-domrect-top title="section 4">4</a>
<li>transformList, <a href=#dom-dommatrixdommatrix-transformlist title="section 7">7</a>
<li>transformpoint(), <a href=#dom-dommatrixreadonly-transformpoint title="section 7">7</a>
<li>translate(), <a href=#dom-dommatrixreadonly-translate title="section 7">7</a>
<li>translateby(), <a href=#dom-dommatrix-translateby title="section 7">7</a>
<li>tx<ul><li>argument for DOMMatrixReadOnly/translate(), <a href=#dom-dommatrixreadonlytranslate-tx title="section 7">7</a>
<li>argument for DOMMatrix/translateBy(), <a href=#dom-dommatrixtranslateby-tx title="section 7">7</a>
</ul><li>ty<ul><li>argument for DOMMatrixReadOnly/translate(), <a href=#dom-dommatrixreadonlytranslate-ty title="section 7">7</a>
<li>argument for DOMMatrix/translateBy(), <a href=#dom-dommatrixtranslateby-ty title="section 7">7</a>
</ul><li>tz<ul><li>argument for DOMMatrixReadOnly/translate(), <a href=#dom-dommatrixreadonlytranslate-tz title="section 7">7</a>
<li>argument for DOMMatrix/translateBy(), <a href=#dom-dommatrixtranslateby-tz title="section 7">7</a>
</ul><li>w<ul><li>argument for DOMPoint/DOMPoint(), <a href=#dom-dompointdompoint-w title="section 3">3</a>
<li>dict-member for DOMPointInit, <a href=#dom-dompointinit-w title="section 3">3</a>
<li>attribute for DOMPointReadOnly, DOMPoint, <a href=#dom-dompointreadonly-dompoint-w title="section 3">3</a>
</ul><li>width<ul><li>definition of, <a href=#width title="section 4">4</a>
<li>argument for DOMRect/DOMRect(), <a href=#dom-domrectdomrect-width title="section 4">4</a>
<li>attribute for DOMRectReadOnly, DOMRect, <a href=#dom-domrectreadonly-domrect-width title="section 4">4</a>
</ul><li>x<ul><li>argument for DOMPoint/DOMPoint(), <a href=#dom-dompointdompoint-x title="section 3">3</a>
<li>dict-member for DOMPointInit, <a href=#dom-dompointinit-x title="section 3">3</a>
<li>attribute for DOMPointReadOnly, DOMPoint, <a href=#dom-dompointreadonly-dompoint-x title="section 3">3</a>
<li>argument for DOMRect/DOMRect(), <a href=#dom-domrectdomrect-x title="section 4">4</a>
<li>attribute for DOMRectReadOnly, DOMRect, <a href=#dom-domrectreadonly-domrect-x title="section 4">4</a>
<li>argument for DOMMatrixReadOnly/rotateFromVector(), <a href=#dom-dommatrixreadonlyrotatefromvector-x title="section 7">7</a>
<li>argument for DOMMatrixReadOnly/rotateAxisAngle(), <a href=#dom-dommatrixreadonlyrotateaxisangle-x title="section 7">7</a>
<li>argument for DOMMatrix/rotateFromVectorBy(), <a href=#dom-dommatrixrotatefromvectorby-x title="section 7">7</a>
<li>argument for DOMMatrix/rotateAxisAngleBy(), <a href=#dom-dommatrixrotateaxisangleby-x title="section 7">7</a>
</ul><li>x coordinate, <a href=#x-coordinate title="section 4">4</a>
<li>y<ul><li>argument for DOMPoint/DOMPoint(), <a href=#dom-dompointdompoint-y title="section 3">3</a>
<li>dict-member for DOMPointInit, <a href=#dom-dompointinit-y title="section 3">3</a>
<li>attribute for DOMPointReadOnly, DOMPoint, <a href=#dom-dompointreadonly-dompoint-y title="section 3">3</a>
<li>argument for DOMRect/DOMRect(), <a href=#dom-domrectdomrect-y title="section 4">4</a>
<li>attribute for DOMRectReadOnly, DOMRect, <a href=#dom-domrectreadonly-domrect-y title="section 4">4</a>
<li>argument for DOMMatrixReadOnly/rotateFromVector(), <a href=#dom-dommatrixreadonlyrotatefromvector-y title="section 7">7</a>
<li>argument for DOMMatrixReadOnly/rotateAxisAngle(), <a href=#dom-dommatrixreadonlyrotateaxisangle-y title="section 7">7</a>
<li>argument for DOMMatrix/rotateFromVectorBy(), <a href=#dom-dommatrixrotatefromvectorby-y title="section 7">7</a>
<li>argument for DOMMatrix/rotateAxisAngleBy(), <a href=#dom-dommatrixrotateaxisangleby-y title="section 7">7</a>
</ul><li>y coordinate, <a href=#y-coordinate title="section 4">4</a>
<li>z<ul><li>argument for DOMPoint/DOMPoint(), <a href=#dom-dompointdompoint-z title="section 3">3</a>
<li>dict-member for DOMPointInit, <a href=#dom-dompointinit-z title="section 3">3</a>
<li>attribute for DOMPointReadOnly, DOMPoint, <a href=#dom-dompointreadonly-dompoint-z title="section 3">3</a>
<li>argument for DOMMatrixReadOnly/rotateAxisAngle(), <a href=#dom-dommatrixreadonlyrotateaxisangle-z title="section 7">7</a>
<li>argument for DOMMatrix/rotateAxisAngleBy(), <a href=#dom-dommatrixrotateaxisangleby-z title="section 7">7</a>
</ul></ul></div>

<h2 class="no-num no-ref heading settled heading" id=property-index><span class=content>
Property index</span><a class=self-link href=#property-index></a></h2>
<div data-fill-with=property-index><p>No properties defined.</div>


<h2 class="no-num heading settled" id=issues-index><span class=content>Issues Index</span><a class=self-link href=#issues-index></a></h2><div style="counter-reset: issue"><div class=issue>SVGPoint has a method: SVGPoint matrixTransform(in SVGMatrix matrix);<br>Should it be adapted and added here as well?<a href=#issue-ffc97e37> ↵ </a></div>

<div class=issue>What if all components of <a class=idl-code data-link-type=method href=#dom-dommatrixreadonly-rotateaxisangle title=rotateaxisangle()>rotateAxisAngle()</a> are 0 or undefined?<a href=#issue-70fc7f38> ↵ </a></div>
    <div class=issue>Should unit-less values (like for SVG transform presentation attribute) be allowed as string input for the constructor too? <span class=css data-link-type=maybe title=translate(20,20)>translate(20,20)</span><a href=#issue-b394af0e> ↵ </a></div>

</div>