<!DOCTYPE html>
<html>
  <head>
    <title>DOMMatrix interface</title>
    <meta charset='utf-8'>
    <script src="respec-w3c-common-3.1.64.js" class="remove"></script>
    <script class='remove'>
      var respecConfig = {
          specStatus:           "ED",
          shortName:            "matrix",
          edDraftURI:           "http://dev.w3.org/fxtf/matrix/",
          editors:  [
              { name: "Dirk Schulze", mailto: "dschulze@adobe.com",
                company: "Adobe Systems Inc.", companyURL: "http://adobe.com/" },
              { name: "Rik Cabanier", mailto: "cabanier@adobe.com",
                company: "Adobe Systems Inc.", companyURL: "http://adobe.com/" },
          ],
          wg: [ "CSS Working Group",
                "SVG Working Group" ],
          wgURI: [ "http://dev.w3.org/Style/CSS/members",
                   "http://www.w3.org/Graphics/SVG/WG" ],

          wgActivity: [ 
            [ "Style",    "http://www.w3.org/Style/Activity" ],
            [ "Graphics", "http://www.w3.org/Graphics/Activity" ]
          ],          
          // name (without the @w3c.org) of the public mailing to which comments are due
          wgPublicList: "public-fx",
          wgPatentURI:  "",
          noIDLSorting: true,
          noIDLIn:  true,
      };
    </script>
    <style type="text/css">
      body {
        max-width: 50em;
        margin: 0 auto !important;
      }
    </style>
  </head>
  <body>
    <section id='abstract'>
      <p>
        This specification describes a transformation matrix interface with the dimension of 3x2 and 4x4.
      </p>

      <p>
        The transformation matrix interface replaces the SVGMatrix interface from SVG [[SVG11]]. It is a common interface used to describe 2D and 3D transformations on a graphical context for SVG, Canvas 2D Context [[CANVAS-2D]] and CSS Transforms [[CSS3-TRANSFORMS]]<!-- and WebGL [[WEBGL]] -->.
      </p>
    </section>

    <section>
      <h2>Terminology</h2>
      <dl>
        <dt><dfn>post-multiply</dfn></dt>
        <dd>Term A post-multiplied by term B is equal to A &middot; B.</dd>
        <dt><dfn>pre-multiply</dfn></dt>
        <dd>Term A pre-multiplied by term B is equal to B &middot; A.</dd>
        <dt><dfn>multiply</dfn></dt>
        <dd>Multiply term A by term B is equal to A &middot; B.</dd>
      </dl>
    </section>

    <section>
      <h2>The <a>DOMPointLiteral</a> dictionary</h2>

      <p class="issue">The following definition might move to CSSOM View</p>

      <p>
        A 2D point or a 3D point can be represented by the following WebIDL dictionary:
      </p>

      <dl title='dictionary DOMPointLiteral' class='idl'>
        <dt>unrestricted double x = 0</dt>
        <dd>
          The x coordinate of the point literal.
        </dd>
        <dt>unrestricted double y = 0</dt>
        <dd>
          The y coordinate of the point literal.
        </dd>
        <dt>unrestricted double z = 0</dt>
        <dd>
          The z coordinate of the point literal.
        </dd>
        <dt>unrestricted double w = 1</dt>
        <dd>
          The perspective of the point literal.
        </dd>
      </dl>
    </section>

    <section>
      <h2>The <a>DOMPoint</a> interface</h2>

      <p>
        A 2D point or a 3D point can be represented by the following WebIDL interface:
      </p>

      <dl title='interface DOMPoint' class='idl'>
        <dt>Constructor()</dt>
        <dd>Creates a DOMPoint. The attribute values for x, y, z default to 0 and for w defaults to 1.</dd>
        <dt>Constructor()</dt>
        <dd>
          <dl class='parameters'>
            <dt>DOMPointLiteral point</dt>
            <dd>A <a>DOMPointLiteral</a> is a dictionary. The attribute values x, y, z and w are initialized to the corresponding dictionary values of <span>point</span>.</dd>
          </dl>
        </dd>
        <dt>Constructor()</dt>
        <dd>
          <dl class='parameters'>
            <dt>unrestricted double x</dt>
            <dd>Sets the x coordinate of the point.</dd>
            <dt>unrestricted double y</dt>
            <dd>Sets the y coordinate of the point.</dd>
            <dt>optional unrestricted double z = 0</dt>
            <dd>Sets the z coordinate of the point.</dd>
            <dt>optional unrestricted double w = 1</dt>
            <dd>Sets the perspective of the point.</dd>
          </dl>
        </dd>
        <dt>attribute unrestricted double x</dt>
        <dd>
          <p>The x coordinate of the point.</p>
        </dd>
        <dt>attribute unrestricted double y</dt>
        <dd>
          <p>The y coordinate of the point.</p>
        </dd>
        <dt>attribute unrestricted double z</dt>
        <dd>
          <p>The z coordinate of the point.</p>
        </dd>
        <dt>attribute unrestricted double w</dt>
        <dd>
          <p>The perspective of the point.</p>
        </dd>
      </dl>
    </section>
<!--
    <section>
      <h2>The <a>DecomposedMatrix</a> dictionary</h2>
      <p>
        The resulting values of a decomposed matrix as defined by <a href="#decomposing-the-matrix">Decomposing the matrix</a> and used in CSS Transforms [[CSS3-TRANSFORMS]] are represented by the following DecomposedMatrix dictionary:
      </p>

      <dl title='dictionary DecomposedMatrix' class='idl'>
        <dt>sequence&lt;double> translation</dt>
        <dd>
          Is an sequence of three double items for the translation of the matrix.
        </dd>
        <dt>sequence&lt;double> scale</dt>
        <dd>
          Is an sequence of three double items for the scaling of the matrix.
        </dd>
        <dt>sequence&lt;double> skew</dt>
        <dd>
          Is an sequence of three double items representing the shear of the matrix.
        </dd>
        <dt>sequence&lt;double> perspective</dt>
        <dd>
          Is an sequence of four double items representing the perspective of the matrix.
        </dd>
        <dt>sequence&lt;double> quaternions</dt>
        <dd>
          Is an sequence of four double items representing the quaternions for the rotation of the matrix.
        </dd>
      </dl>

      <p class='issue'>Define initial values.</p>

      <p class='issue'>
        It is doubtful that this can be very useful for authors. On the other hand, it allows scripted animations similar to the animations by CSS3 Transforms.
      </p>
    </section>
-->
    <section>
      <h2>The <a>DOMMatrix</a> interface</h2>

      <p>
        The <a>DOMMatrix</a> interface represents a mathematical matrix with the purpose of describing transformations a graphical contexts. The following sections describe the details of the interface. For the full interface see <a href="#webidl-ref">Interface summary</a>.
      </p>

      <p>
        <a>DOMMatrix</a> aims to replace the SVGMatrix interface from SVG [[SVG11]]. However, the SVGMatrix interface is mandatory for user agents with support for SVG. The SVGMatrix interface must be an alias to the DOMMatrix interface, the sameway as the HTMLDocument interface is to the Document interface.
      </p>

      <div class="figure">
        <img src="images/4x4matrix.png" alt="4x4 matrix with items m11 to m44">
        <p class="capture">A 4x4 matrix representing a <a>DOMMatrix</a> with items m11 to m44.</p>
      </div>

      <p class="issue">It needs to be decided if DOMMatrix stored single or double precision floating point numbers.</p>

      <section>
        <h3>The constructors</h3>

        <p>
          A series of constructors to create a <a>DOMMatrix</a> object.
        </p>

        <dl title='interface DOMMatrix' class='idl'>
          <dt>Constructor()</dt>
          <dd>Creates an identity matrix.</dd>
          <dt>Constructor()</dt>
          <dd>
            <dl class='parameters'>
              <dt>DOMString transformList</dt>
              <dd>A DOMString of transformation functions with the syntax and specifies defined in CSS Transforms [[!CSS3-TRANSFORMS]]. One CSS pixel length maps to one unit less value in the matrix.</dd>
            </dl>
            The DOMString must consist of a transform function list as specified by CSS Transforms.
            <pre class='example'>
              <p>In the following example a CSS Transform string is passed to the DOMMatrix constructor.</p>
              <pre><code>var matrix = new DOMMatrix("translate(20px,20px), scale(2,3), rotate(45deg)"</code></pre>
              <p>The resulting matrix is equal to the following sequence of method calls:</p>
              <pre><code>
var matrix = new DOMMatrix();
matrix.translateBy(20,20);
matrix.scaleNonUniformBy(2,3);
matrix.rotateBy(45);
              </code></pre>
            </pre>
            <p class='issue'>Should unit-less values (like for SVG transform presentation attribute) be allowed too? <code>"translate(20,20)"</code></p>
            <p>Throws a <var>DOMException</var> with name <code>SyntaxError</code> if the <code>DOMString</code> parameter does not validate to a transform list [[!CSS3-TRANSFORMS]].
          </dd>
          <dt>Constructor()</dt>
          <dd>
            <dl class='parameters'>
              <dt>DOMMatrix other</dt>
              <dd>All element values of the current matrix are set to the element values of the other matrix.</dd>
            </dl>
          </dd>
<!--
          <dt>Constructor()</dt>
          <dd>
            <dl class='parameters'>
              <dt>DecomposedMatrix decomposedValues</dt>
              <dd>
                Recomposes the decomposed values as specified in <a href="#recomposing-the-matrix">Recomposing the matrix</a> and sets the element values of the current matrix.
              </dd>
            </dl>
          </dd>
-->
          <dt>Constructor()</dt>
          <dd>
            <dl class='parameters'>
              <dt>Float32array array</dt>
              <dd>
                Create an identity matrix first. An Float32array [[!TYPED-ARRAYS]] of 6 items sets the element values <code>a</code> to <code>f</code>. An array of 16 items sets the element values <code>m11</code> to <code>m44</code>.
              </dd>
            </dl>
            <p>Throws a <var>DOMException</var> with name <code>SyntaxError</code> if the <code>Float32array</code> parameter does not consist of 6 or 16 items.
          </dd>
          <dt>Constructor()</dt>
          <dd>
            <dl class='parameters'>
              <dt>Float64array array</dt>
              <dd>
                Create an identity matrix first. An Float64array [[!TYPED-ARRAYS]] of 6 items sets the element values <code>a</code> to <code>f</code>. An array of 16 items sets the element values <code>m11</code> to <code>m44</code>.
              </dd>
            </dl>
            <p>Throws a <var>DOMException</var> with name <code>SyntaxError</code> if the <code>Float64array</code> parameter does not consist of 6 or 16 items.
          </dd>
          <dt>Constructor()</dt>
          <dd>
            <dl class='parameters'>
              <dt>sequence&lt;unrestricted double> numberSequence</dt>
              <dd>
                Create an identity matrix first. A sequence of 6 items sets the element values <code>a</code> to <code>f</code>. A sequence of 16 items sets the element values <code>m11</code> to <code>m44</code>. 
              </dd>
            </dl>
            <p>Throws a <var>DOMException</var> with name <code>SyntaxError</code> if the number sequence parameter does not consist of 6 or 16 items.
          </dd>
        </section>

        <section>
          <h3>Two-dimensional attributes</h3>

          <p>
            If a <a>DOMMatrix</a> just consists of 2D transformations the 6 values <code>a</code> to <code>f</code> can represent the transformation matrix. If the <a>DOMMatrix</a> object is immutable, a <var>DOMException</var> with name <code>NoModificationAllowedError</code> must be thrown on setting the attributes.
          </p>

          <p>
            The following attributes <code>a</code> to <code>f</code> are aliases to the two-dimensional elements of the 4x4 matrix.
          </p>

          <dl title='partial interface DOMMatrix' class='idl'>
            <dt>// These attributes are simple aliases for certain elements of the 4x4 matrix</dt>
            <dd></dd>
            <dt>attribute unrestricted double a</dt>
            <dd>
              <p>Corresponds to the attribute <span>m11</span> of the DOMMatrix interface.</p>
            </dd>
            <dt>attribute unrestricted double b</dt>
            <dd>
              <p>Corresponds to the attribute <span>m12</span> of the DOMMatrix interface.</p>
            </dd>
            <dt>attribute unrestricted double c</dt>
            <dd>
              <p>Corresponds to the attribute <span>m21</span> of the DOMMatrix interface.</p>
            </dd>
            <dt>attribute unrestricted double d</dt>
            <dd>
              <p>Corresponds to the attribute <span>m22</span> of the DOMMatrix interface.</p>
            </dd>
            <dt>attribute unrestricted double e</dt>
            <dd>
              <p>Corresponds to the attribute <span>m41</span> of the DOMMatrix interface.</p>
            </dd>
            <dt>attribute unrestricted double f</dt>
            <dd>
              <p>Corresponds to the attribute <span>m42</span> of the DOMMatrix interface.</p>
            </dd>
          </dl>
        </section>

        <section>
          <h3>Three-dimensional attributes</h3>

          <p>
            The following attributes <code>m11</code> to <code>m44</code> represent the elements of the 4x4 matrix. The coordinates are in column-major order. If the <a>DOMMatrix</a> object is immutable, a <var>DOMException</var> with name <code>NoModificationAllowedError</code> must be thrown on setting the attributes.
          </p>

          <dl title='partial interface DOMMatrix' class='idl'>
            <dt>attribute unrestricted double m11</dt>
            <dd>
              <p>
                The value of the element in column 1, row 1 of the matrix.
              </p>
            </dd>
            <dt>attribute unrestricted double m12</dt>
            <dd>
              <p>
                The value of the element in column 1, row 2 of the matrix.
              </p>
            </dd>
            <dt>attribute unrestricted double m13</dt>
            <dd>
              <p>
                The value of the element in column 1, row 3 of the matrix.
              </p>
            </dd>
            <dt>attribute unrestricted double m14</dt>
            <dd>
              <p>
                The value of the element in column 1, row 4 of the matrix.
              </p>
            </dd>
            <dt>attribute unrestricted double m21</dt>
            <dd>
              <p>
                The value of the element in column 2, row 1 of the matrix.
              </p>
            </dd>
            <dt>attribute unrestricted double m22</dt>
            <dd>
              <p>
                The value of the element in column 2, row 2 of the matrix.
              </p>
            </dd>
            <dt>attribute unrestricted double m23</dt>
            <dd>
              <p>
                The value of the element in column 2, row 3 of the matrix.
              </p>
            </dd>
            <dt>attribute unrestricted double m24</dt>
            <dd>
              <p>
                The value of the element in column 2, row 4 of the matrix.
              </p>
            </dd>
            <dt>attribute unrestricted double m31</dt>
            <dd>
              <p>
                The value of the element in column 3, row 1 of the matrix.
              </p>
            </dd>
            <dt>attribute unrestricted double m32</dt>
            <dd>
              <p>
                The value of the element in column 3, row 2 of the matrix.
              </p>
            </dd>
            <dt>attribute unrestricted double m33</dt>
            <dd>
              <p>
                The value of the element in column 3, row 3 of the matrix.
              </p>
            </dd>
            <dt>attribute unrestricted double m34</dt>
            <dd>
              <p>
                The value of the element in column 3, row 4 of the matrix.
              </p>
            </dd>
            <dt>attribute unrestricted double m41</dt>
            <dd>
              <p>
                The value of the element in column 4, row 1 of the matrix.
              </p>
            </dd>
            <dt>attribute unrestricted double m42</dt>
            <dd>
              <p>
                The value of the element in column 4, row 2 of the matrix.
              </p>
            </dd>
            <dt>attribute unrestricted double m43</dt>
            <dd>
              <p>
                The value of the element in column 4, row 3 of the matrix.
              </p>
            </dd>
            <dt>attribute unrestricted double m44</dt>
            <dd>
              <p>
                The value of the element in column 4, row 4 of the matrix.
              </p>
            </dd>
          </dl>
        </section>

        <section>
          <h3>Immutable transformation methods</h3>

          <p>
            The following methods do not modify the current matrix and return new <a>DOMMatrix</a> object.
          </p>

          <dl title='partial interface DOMMatrix' class='idl'>
            <dt>// Immutable transform methods</dt>
            <dd></dd>
            <dt>DOMMatrix translate()</dt>
            <dd>
              <dl class='parameters'>
                <dt>unrestricted double tx</dt>
                <dd>Translation value along the x-axis.</dd>
                <dt>unrestricted double ty</dt>
                <dd>Translation value along the y-axis.</dd>
                <dt>optional unrestricted double tz = 0</dt>
                <dd>Optional translation value along the z-axis.</dd>
              </dl>
              <p>Post-multiplies a translation transformation on the current matrix and returns the resulting matrix. The current matrix is not modified.</p>
              <p>The 3D translation matrix is <a href="http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#Translate3dDefined">described</a> in CSS Transforms [[!CSS3-TRANSFORMS]].</p>
            </dd>
            <dt>DOMMatrix scale()</dt>
            <dd>
              <dl class='parameters'>
                <dt>unrestricted double scale</dt>
                <dd>Multiplier for a uniform scale transformation.</dd>
                <dt>optional unrestricted double originX = 0</dt>
                <dd>Transformation origin on the x-axis.</dd>
                <dt>optional unrestricted double originY = 0</dt>
                <dd>Transformation origin on the y-axis.</dd>
              </dl>
              <p>Post-multiplies a uniform 2D scale transformation (<code>m11 = m22 = scale</code>) on the current matrix with the given origin and returns the resulting matrix. The current matrix is not modified.</p>
              <p>The 2D scale matrix is <a href="http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#ScaleDefined">described</a> in CSS Transforms with <code>sx = sy = scale</code>. This does not include the origin translation. [[!CSS3-TRANSFORMS]].</p>
            </dd>
            <dt>DOMMatrix scale3d()</dt>
            <dd>
              <dl class='parameters'>
                <dt>unrestricted double scale</dt>
                <dd>Multiplier for a uniform scale transformation.</dd>
                <dt>optional unrestricted double originX = 0</dt>
                <dd>Transformation origin on the x-axis.</dd>
                <dt>optional unrestricted double originY = 0</dt>
                <dd>Transformation origin on the y-axis.</dd>
                <dt>optional unrestricted double originZ = 0</dt>
                <dd>Transformation origin on the z-axis.</dd>
              </dl>
              <p>Post-multiplies a uniform scale transformation (<code>m11 = m22 = m33 = scale</code>) on the current matrix with the given origin and returns the resulting matrix. The current matrix is not modified.</p>
              <p>The 3D scale matrix is <a href="http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#Scale3dDefined">described</a> in CSS Transforms with <code>sx = sy = sz = scale</code>. This does not include the origin translation. [[!CSS3-TRANSFORMS]].</p>
            </dd>
            <dt>DOMMatrix scaleNonUniform()</dt>
            <dd>
              <dl class='parameters'>
                <dt>unrestricted double scaleX</dt>
                <dd>Multiplier for a non-uniform scale along the x-axis.</dd>
                <dt>optional unrestricted double scaleY = 1</dt>
                <dd>Multiplier for a non-uniform scale along the y-axis.</dd>
                <dt>optional unrestricted double scaleZ = 1</dt>
                <dd>Multiplier for a non-uniform scale along the z-axis.</dd>
                <dt>optional unrestricted double originX = 0</dt>
                <dd>Transformation origin on the x-axis.</dd>
                <dt>optional unrestricted double originY = 0</dt>
                <dd>Transformation origin on the y-axis.</dd>
                <dt>optional unrestricted double originZ = 0</dt>
                <dd>Transformation origin on the z-axis.</dd>
              </dl>
              <p>Post-multiplies a non-uniform scale transformation on the current matrix with the given origin and returns the resulting matrix. The current matrix is not modified.</p>
              <p>The 3D scale matrix is <a href="http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#Scale3dDefined">described</a> in CSS Transforms with <code>sx = scaleX</code>,  <code>sy = scaleY</code> and <code>sz = scaleZ</code>. This does not include the origin translation. [[!CSS3-TRANSFORMS]].</p>
            </dd>
            <dt>DOMMatrix rotate()</dt>
            <dd>
              <dl class='parameters'>
                <dt>unrestricted double angle</dt>
                <dd>Rotation angle in degrees.</dd>
                <dt>optional unrestricted double originX = 0</dt>
                <dd>Transformation origin on the x-axis.</dd>
                <dt>optional unrestricted double originY = 0</dt>
                <dd>Transformation origin on the y-axis.</dd>
              </dl>
              <p>Post-multiplies a rotation transformation on the current matrix with the given origin and returns the resulting matrix. The current matrix is not modified.</p>
              <p>The 2D rotation matrix is <a href="http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#RotateDefined">described</a> in CSS Transforms with <code>alpha = angle</code>. This does not include the origin translation. [[!CSS3-TRANSFORMS]].</p>
            </dd>
            <dt>DOMMatrix rotateFromVector(unrestricted double x, unrestricted double y)</dt>
            <dd>
              <dl class='parameters'>
                <dt>unrestricted double x</dt>
                <dd>The x coordinate of the vector (x,y)<sup>T</sup>.</dd>
                <dt>unrestricted double y</dt>
                <dd>The y coordinate of the vector (x,y)<sup>T</sup>.</dd>
              </dl>
              <p>Post-multiplies a rotation transformation on the current matrix and returns the resulting matrix. The rotation angle is determined by the angle between the vector (1,0)<sup>T</sup> and (x,y)<sup>T</sup> in the clockwise direction. If <code>x</code> and <code>y</code> should both be zero, the angle is specified as zero. The current matrix is not modified.</p>
              <p>The 2D rotation matrix is <a href="http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#RotateDefined">described</a> in CSS Transforms where <code>alpha</code> is the angle between the vector (1,0)<sup>T</sup> and (x,y)<sup>T</sup> in degrees [[!CSS3-TRANSFORMS]].</p>
            </dd>
            <dt>DOMMatrix rotateAxisAngle(unrestricted double x, unrestricted double y, unrestricted double z, unrestricted double angle)</dt>
            <dd>
              <dl class='parameters'>
                <dt>unrestricted double x</dt>
                <dd>The x coordinate of the vector (x,y,z).</dd>
                <dt>unrestricted double y</dt>
                <dd>The y coordinate of the vector (x,y,z).</dd>
                <dt>unrestricted double z</dt>
                <dd>The z coordinate of the vector (x,y,z).</dd>
                <dt>unrestricted double angle</dt>
                <dd>Rotation angle in degrees.</dd>
              </dl>
              <p>Post-multiplies a rotation transformation on the current matrix and returns the resulting matrix. The rotation of the transform is applied around the given vector. The current matrix is not modified.</p>
              <p>The 3D rotation matrix is <a href="http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#Rotate3dDefined">described</a> in CSS Transforms with <code>alpha = angle</code> [[!CSS3-TRANSFORMS]].</p>
            </dd>
            <dt>DOMMatrix skewX()</dt>
            <dd>
              <dl class='parameters'>
                <dt>unrestricted double sx</dt>
                <dd>Skew angle along the x-axis in degrees.</dd>
              </dl>
              <p>Post-multiplies a skewX transformation on the current matrix and returns the resulting matrix. The current matrix is not modified.</p>
              <p>The 2D skewX matrix is <a href="http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#SkewXDefined">described</a> in CSS Transforms with <code>alpha = sx</code> [[!CSS3-TRANSFORMS]].</p>
            </dd>
            <dt>DOMMatrix skewY()</dt>
            <dd>
              <dl class='parameters'>
                <dt>unrestricted double sy</dt>
                <dd>Skew angle along the y-axis in degrees.</dd>
              </dl>
              <p>Post-multiplies a skewX transformation on the current matrix and returns the resulting matrix.</p>
              <p>The 2D skewY matrix is <a href="http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#SkewYDefined">described</a> in CSS Transforms with <code>beta = sy</code> [[!CSS3-TRANSFORMS]].</p>
            </dd>
            <dt>DOMMatrix multiply()</dt>
            <dd>
              <dl class='parameters'>
                <dt>DOMMatrix other</dt>
                <dd>Other matrix for multiplication</dd>
              </dl>
              Performs matrix multiplication. This matrix is post-multiplied by the other matrix, returning the resulting new matrix. The current matrix is not modified.
            </dd>
            <dt>DOMMatrix flipX()</dt>
            <dd>
              Post-multiplies the transformation <code>DOMMatrix(-1, 0, 0, 1, 0, 0)</code> and returns the resulting matrix. The current matrix is not modified.
            </dd>
            <dt>DOMMatrix flipY()</dt>
            <dd>
              Post-multiplies the transformation <code>DOMMatrix(1, 0, 0, -1, 0, 0)</code> and returns the resulting matrix. The current matrix is not modified.
            </dd>
            <dt>DOMMatrix inverse()</dt>
            <dd>
              Returns the inverted matrix of the current matrix. The current matrix is not modified.
            </dd>
          </dl>
        </section>

        <section>
          <h3>Mutable transformation methods</h3>

          <p>
            The following methods do modify the current matrix. If the <a>DOMMatrix</a> object is immutable, a <var>DOMException</var> with name <code>NoModificationAllowedError</code> must be thrown on calling the operations below.
          </p>

          <dl title='partial interface DOMMatrix' class='idl'>
            <dt>// Mutable transform methods</dt>
            <dd></dd>
            <dt>void multiplyBy()</dt>
            <dd>
              <dl class='parameters'>
                <dt>DOMMatrix other</dt>
                <dd>The matrix that gets post-multiplied.</dd>
              </dl>
              The other matrix gets post-multiplied to the current matrix.
            </dd>
            <dt>void preMultiplyBy()</dt>
            <dd>
              <dl class='parameters'>
                <dt>DOMMatrix other</dt>
                <dd>The matrix that gets pre-multiplied.</dd>
              </dl>
              The other matrix gets pre-multiplied to the current matrix.
            </dd>
            <dt>void translateBy()</dt>
            <dd>
              <dl class='parameters'>
                <dt>unrestricted double tx</dt>
                <dd>Translation value along the x-axis.</dd>
                <dt>unrestricted double ty</dt>
                <dd>Translation value along the y-axis.</dd>
                <dt>optional unrestricted double tz = 0</dt>
                <dd>Optional translation value along the z-axis.</dd>
              </dl>
              <p>Post-multiplies a translation transformation on the current matrix.</p>
              <p>The 3D translation matrix is <a href="http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#Translate3dDefined">described</a> in CSS Transforms [[!CSS3-TRANSFORMS]].</p>
            </dd>
            <dt>void scaleBy()</dt>
            <dd>
              <dl class='parameters'>
                <dt>unrestricted double scale</dt>
                <dd>Multiplier for a uniform scale transformation.</dd>
                <dt>optional unrestricted double originX = 0</dt>
                <dd>Transformation origin on the x-axis.</dd>
                <dt>optional unrestricted double originY = 0</dt>
                <dd>Transformation origin on the y-axis.</dd>
              </dl>
              <p>Post-multiplies a uniform 2D scale transformation (<code>m11 = m22 = scale</code>) on the current matrix with the given origin.</p>
              <p>The 2D scale matrix is <a href="http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#ScaleDefined">described</a> in CSS Transforms with <code>sx = sy = scale</code>. This does not include the origin translation. [[!CSS3-TRANSFORMS]].</p>
            </dd>
            <dt>void scale3dBy()</dt>
            <dd>
              <dl class='parameters'>
                <dt>unrestricted double scale</dt>
                <dd>Multiplier for a uniform scale transformation.</dd>
                <dt>optional unrestricted double originX = 0</dt>
                <dd>Transformation origin on the x-axis.</dd>
                <dt>optional unrestricted double originY = 0</dt>
                <dd>Transformation origin on the y-axis.</dd>
                <dt>optional unrestricted double originZ = 0</dt>
                <dd>Transformation origin on the z-axis.</dd>
              </dl>
              <p>Post-multiplies a uniform 2D scale transformation (<code>m11 = m22 = m33 = scale</code>) on the current matrix with the given origin.</p>
              <p>The 3D scale matrix is <a href="http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#Scale3dDefined">described</a> in CSS Transforms with <code>sx = sy = sz = scale</code>. This does not include the origin translation. [[!CSS3-TRANSFORMS]].</p>
            </dd>
            <dt>void scaleNonUniformBy()</dt>
            <dd>
              <dl class='parameters'>
                <dt>unrestricted double scaleX</dt>
                <dd>Multiplier for a non-uniform scale along the x-axis.</dd>
                <dt>optional unrestricted double scaleY = 1</dt>
                <dd>Multiplier for a non-uniform scale along the y-axis.</dd>
                <dt>optional unrestricted double scaleZ = 1</dt>
                <dd>Multiplier for a non-uniform scale along the z-axis.</dd>
                <dt>optional unrestricted double originX = 0</dt>
                <dd>Transformation origin on the x-axis.</dd>
                <dt>optional unrestricted double originY = 0</dt>
                <dd>Transformation origin on the y-axis.</dd>
                <dt>optional unrestricted double originZ = 0</dt>
                <dd>Transformation origin on the z-axis.</dd>
              </dl>
              <p>Post-multiplies a non-uniform scale transformation on the current matrix with the given origin.</p>
              <p>The 3D scale matrix is <a href="http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#Scale3dDefined">described</a> in CSS Transforms with <code>sx = scaleX</code>,  <code>sy = scaleY</code> and <code>sz = scaleZ</code>. This does not include the origin translation. [[!CSS3-TRANSFORMS]].</p>
            </dd>
            <dt>void rotateBy()</dt>
            <dd>
              <dl class='parameters'>
                <dt>unrestricted double angle</dt>
                <dd>Rotation angle in degrees.</dd>
                <dt>optional unrestricted double originX = 0</dt>
                <dd>Transformation origin on the x-axis.</dd>
                <dt>optional unrestricted double originY = 0</dt>
                <dd>Transformation origin on the y-axis.</dd>
              </dl>
              <p>Post-multiplies a rotation transformation on the current matrix with the given origin.</p>
              <p>The 2D rotation matrix is <a href="http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#RotateDefined">described</a> in CSS Transforms with <code>alpha = angle</code>. This does not include the origin translation. [[!CSS3-TRANSFORMS]].</p>
            </dd>
            <dt>void rotateFromVectorBy(unrestricted double x, unrestricted double y)</dt>
            <dd>
              <dl class='parameters'>
                <dt>unrestricted double x</dt>
                <dd>The x coordinate of the vector (x,y)<sup>T</sup>.</dd>
                <dt>unrestricted double y</dt>
                <dd>The y coordinate of the vector (x,y)<sup>T</sup>.</dd>
              </dl>
              <p>Post-multiplies a rotation transformation on the current matrix. The rotation angle is determined by the angle between the vector (1,0)<sup>T</sup> and (x,y)<sup>T</sup> in the clockwise direction. If <code>x</code> and <code>y</code> should both be zero, the angle is specified as zero.</p>
              <p>The 2D rotation matrix is <a href="http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#RotateDefined">described</a> in CSS Transforms where <code>alpha</code> is the angle between the vector (1,0)<sup>T</sup> and (x,y)<sup>T</sup> in degrees [[!CSS3-TRANSFORMS]].</p>
            </dd>
            <dt>void rotateAxisAngleBy(unrestricted double x, unrestricted double y, unrestricted double z, unrestricted double angle)</dt>
            <dd>
              <dl class='parameters'>
                <dt>unrestricted double x</dt>
                <dd>The x coordinate of the vector (x,y,z).</dd>
                <dt>unrestricted double y</dt>
                <dd>The y coordinate of the vector (x,y,z).</dd>
                <dt>unrestricted double z</dt>
                <dd>The z coordinate of the vector (x,y,z).</dd>
                <dt>unrestricted double angle</dt>
                <dd>Rotation angle in degrees.</dd>
              </dl>
              <p>Post-multiplies a rotation transformation on the current matrix. The rotation of the transform is applied around the given vector.</p>
              <p>The 3D rotation matrix is <a href="http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#Rotate3dDefined">described</a> in CSS Transforms with <code>alpha = angle</code> [[!CSS3-TRANSFORMS]].</p>
            </dd>
            <dt>void skewXBy()</dt>
            <dd>
              <dl class='parameters'>
                <dt>unrestricted double sx</dt>
                <dd>Skew angle along the x-axis in degrees.</dd>
              </dl>
              <p>Post-multiplies a skewX transformation on the current matrix.</p>
              <p>The 2D skewX matrix is <a href="http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#SkewXDefined">described</a> in CSS Transforms with <code>alpha = sx</code> [[!CSS3-TRANSFORMS]].</p>
            </dd>
            <dt>void skewYBy()</dt>
            <dd>
              <dl class='parameters'>
                <dt>unrestricted double sy</dt>
                <dd>Skew angle along the y-axis in degrees.</dd>
              </dl>
              <p>Post-multiplies a skewX transformation on the current matrix.</p>
              <p>The 2D skewY matrix is <a href="http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#SkewYDefined">described</a> in CSS Transforms with <code>beta = sy</code> [[!CSS3-TRANSFORMS]].</p>
            </dd>
            <dt>void invert()</dt>
            <dd>
              Inverts the current matrix.
            </dd>
          </dl>
        </section>

        <section>
          <h3>Helper methods</h3>

          <p>
            The following helper methods do not modify the <a>DOMMatrix</a> object.
          </p>

          <dl title='partial interface DOMMatrix' class='idl'>
            <dt>// Helper methods</dt>
            <dd></dd>
            <dt>boolean is2D()</dt>
            <dd>
              Returns <code>true</code> if <code>m13</code>, <code>m14</code>, <code>m23</code>, <code>m24</code>, <code>m31</code>, <code>m32</code>, <code>m34</code>, <code>m43</code> are equal to zero and <code>m33</code>, <code>m44</code> are equal to one.
            </dd>
            <dt>unrestricted double determinant()</dt>
            <dd>
              Returns the determinant of the current matrix.
            </dd>
            <dt>DOMPoint transformPoint()</dt>
            <dd>
              <dl class='parameters'>
                <dt>DOMPoint point</dt>
                <dd>A DOMPoint dictionary.</dd>
              </dl>
              The point is post-multiplied on the current matrix and returns the resulting point. <code>point</code> is not modified.
            </dd>
            <dt>Float32Array toFloat32Array()</dt>
            <dd>
              Returns the serialized 16 elements <code>m11</code> to <code>m44</code> of the current matrix in column-major order as Float32Array [[!TYPED-ARRAYS]].
            </dd>
            <dt>Float64Array toFloat64Array()</dt>
            <dd>
              Returns the serialized 16 elements <code>m11</code> to <code>m44</code> of the current matrix in column-major order as Float64Array [[!TYPED-ARRAYS]].
            </dd>
<!--            
            <dt>DecomposedMatrix decompose()</dt>
            <dd>
              Returns the decomposed matrix values of the current matrix as a DecomposedMatrix dictionary. The decomposing follows the algorithm of <a href="#decomposing-the-matrix">Decomposing the DOMMatrix</a>.
            </dd>
-->
            <dt>DOMString stringifier ()</dt>
            <dd>
              Returns a string in the form of a CSS Transforms <code>matrix</code> function if the current matrix is a 2D transform or a CSS Transforms <code>matrix3d</code> else. The syntax is as specified in CSS Transforms [[!CSS3-TRANSFORMS]].
              <pre class='example'>
                <p>In this example a matrix is created and several methods with 2D transformations are called.</p>
                <pre><code>var matrix = new DOMMatrix();
matrix.scaleBy(2);
matrix.translateBy(20,20);</code></pre>
                <p>The <code>matrix.toString()</code> returns the DOM string:</p>
                <pre><code>"matrix(2,0,0,2,20,20)"</code></pre>
                <p>For 3D operations, the <var>stringifier</var> returns DOM string representing a 3D matrix.</p>
                <pre><code>var matrix = new DOMMatrix();
matrix.scale3dBy(2);</code></pre>
                <p>Calling <code>matrix.toString()</code> after the snippet above returns the DOM string:</p>
                <pre><code>"matrix3d(2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,1)"</code></pre>
              </pre>
            </dd>
          </dl>
      </section>
    </section>

    <section>
      <h2>Transformation to a 3x2 matrix</h2>
      <p>Host languages might require an internal 3x2 matrix abstraction of a <a>DOMMatrix</a>. This transformation from a 4x4 matrix to a 3x2 by loosing information is described in section <a href="http://www.w3.org/TR/2012/WD-css3-transforms-20120911/#MatrixDefined">Mathematical Description of Transform Functions</a> of CSS Transforms [[!CSS3-TRANSFORMS]].</p>
    </section>

    <section class='appendix' id="webidl-ref">
      <h2>Interface summary</h2>
    </section>

    <section class='appedix'>
      <h2>Conformance</h2>

      <section>
        <h3 id="conventions">
        Document conventions</h3>

        <p>Conformance requirements are expressed with a combination of
        descriptive assertions and RFC 2119 terminology. The key words “MUST”,
        “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
        “RECOMMENDED”, “MAY”, and “OPTIONAL” in the normative parts of this
        document are to be interpreted as described in RFC 2119.
        However, for readability, these words do not appear in all uppercase
        letters in this specification.

        <p>All of the text of this specification is normative except sections
        explicitly marked as non-normative, examples, and notes. [[!RFC2119]]</p>

        <p>Examples in this specification are introduced with the words “for example”
        or are set apart from the normative text with <code>class="example"</code>,
        like this:

        <pre class="example">
          <p>This is an example of an informative example.</p>
        </pre>

        <p>Informative notes begin with the word “Note” and are set apart from the
        normative text with <code>class="note"</code>, like this:

        <p class="note">Note, this is an informative note.</p>
      </section>

      <section>
        <h3 id="conformance-classes">
        Conformance classes</h3>

        <p>Conformance to this specification
        is defined for three conformance classes:
        <dl>
          <dt><dfn title="style sheet!!as conformance class">style sheet</dfn>
            <dd>A <a href="http://www.w3.org/TR/CSS21/conform.html#style-sheet">CSS
            style sheet</a>.
          <dt><dfn>renderer</dfn></dt>
            <dd>A <a href="http://www.w3.org/TR/CSS21/conform.html#user-agent">UA</a>
            that interprets the semantics of a style sheet and renders
            documents that use them.
          <dt><dfn id="authoring-tool">authoring tool</dfn></dt>
            <dd>A <a href="http://www.w3.org/TR/CSS21/conform.html#user-agent">UA</a>
            that writes a style sheet.
        </dl>

        <p>A style sheet is conformant to this specification
        if all of its statements that use syntax defined in this module are valid
        according to the generic CSS grammar and the individual grammars of each
        feature defined in this module.

        <p>A renderer is conformant to this specification
        if, in addition to interpreting the style sheet as defined by the
        appropriate specifications, it supports all the features defined
        by this specification by parsing them correctly
        and rendering the document accordingly. However, the inability of a
        UA to correctly render a document due to limitations of the device
        does not make the UA non-conformant. (For example, a UA is not
        required to render color on a monochrome monitor.)

        <p>An authoring tool is conformant to this specification
        if it writes style sheets that are syntactically correct according to the
        generic CSS grammar and the individual grammars of each feature in
        this module, and meet all other conformance requirements of style sheets
        as described in this module.
      </section>

      <section>
        <h3 id="partial">
        Partial implementations</h3>

        <p>So that authors can exploit the forward-compatible parsing rules to
        assign fallback values, CSS renderers <strong>must</strong>
        treat as invalid (and <a href="http://www.w3.org/TR/CSS21/conform.html#ignore">ignore
        as appropriate</a>) any at-rules, properties, property values, keywords,
        and other syntactic constructs for which they have no usable level of
        support. In particular, user agents <strong>must not</strong> selectively
        ignore unsupported component values and honor supported values in a single
        multi-value property declaration: if any value is considered invalid
        (as unsupported values must be), CSS requires that the entire declaration
        be ignored.</p>
      </section>

      <section>
        <h3 id="experimental">
        Experimental implementations</h3>

        <p>To avoid clashes with future CSS features, the CSS2.1 specification
        reserves a <a href="http://www.w3.org/TR/CSS21/syndata.html#vendor-keywords">prefixed
        syntax</a> for proprietary and experimental extensions to CSS.

        <p>Prior to a specification reaching the Candidate Recommendation stage
        in the W3C process, all implementations of a CSS feature are considered
        experimental. The CSS Working Group recommends that implementations
        use a vendor-prefixed syntax for such features, including those in
        W3C Working Drafts. This avoids incompatibilities with future changes
        in the draft.
        </p>
      </section>

      <section>
        <h3 id="testing">
        Non-experimental implementations</h3>

        <p>Once a specification reaches the Candidate Recommendation stage,
        non-experimental implementations are possible, and implementors should
        release an unprefixed implementation of any CR-level feature they
        can demonstrate to be correctly implemented according to spec.

        <p>To establish and maintain the interoperability of CSS across
        implementations, the CSS Working Group requests that non-experimental
        CSS renderers submit an implementation report (and, if necessary, the
        testcases used for that implementation report) to the W3C before
        releasing an unprefixed implementation of any CSS features. Testcases
        submitted to W3C are subject to review and correction by the CSS
        Working Group.

        <p>Further information on submitting testcases and implementation reports
        can be found from on the CSS Working Group's website at
        <a href="http://www.w3.org/Style/CSS/Test/">http://www.w3.org/Style/CSS/Test/</a>.
        Questions should be directed to the
        <a href="http://lists.w3.org/Archives/Public/public-css-testsuite">public-css-testsuite@w3.org</a>
        mailing list.
      </section>
    </section>

    <section class='appendix'>
      <h2>Acknowledgments</h2>
      <p>
        Many thanks to Dean Jackson for his initial proposal to make this specification possible.
      </p>
    </section>
  </body>
</html>
